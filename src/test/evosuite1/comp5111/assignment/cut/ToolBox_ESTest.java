/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 05 15:17:27 GMT 2021
 */

package comp5111.assignment.cut;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import comp5111.assignment.cut.ToolBox;
import java.nio.Buffer;
import java.nio.ByteOrder;
import java.nio.CharBuffer;
import java.nio.InvalidMarkException;
import java.util.Arrays;
import java.util.Locale;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

//@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ToolBox_ESTest{

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      char[] charArray0 = new char[22];
      charArray0[0] = '.';
      charArray0[1] = '%';
      charArray0[2] = 'J';
      charArray0[3] = 'x';
      charArray0[4] = 's';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(22, charArray0.length);
      assertNotNull(charBuffer0);
      assertEquals(22, charBuffer0.remaining());
      assertEquals(22, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(".%Jxs\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(22, charBuffer0.length());
      assertEquals(22, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(charBuffer0).when(supplier0).get();
      CharSequence charSequence0 = ToolBox.StringTools.getIfEmpty((CharSequence) null, supplier0);
      assertEquals(22, charArray0.length);
      assertNotNull(charSequence0);
      assertEquals(22, charBuffer0.remaining());
      assertEquals(22, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(".%Jxs\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(22, charBuffer0.length());
      assertEquals(22, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(".%Jxs\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charSequence0.toString());
      assertEquals(22, charSequence0.length());
      
      int int0 = ToolBox.CharSequenceTools.lastIndexOf(charSequence0, charSequence0, 4131);
      assertEquals(22, charArray0.length);
      assertEquals(0, int0);
      assertEquals(22, charBuffer0.remaining());
      assertEquals(22, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(".%Jxs\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(22, charBuffer0.length());
      assertEquals(22, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(".%Jxs\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charSequence0.toString());
      assertEquals(22, charSequence0.length());
      
      String string0 = ToolBox.RegExTools.replaceFirst("aX", "comp5111.assignment.cut.ToolBox$CharTools", "p");
      assertNotNull(string0);
      assertEquals("aX", string0);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '8';
      charArray1[1] = 'a';
      int int1 = ToolBox.StringTools.indexOfAny((CharSequence) null, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(int1 == int0);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'8', 'a'}, charArray1);
      assertEquals((-1), int1);
      assertNotSame(charArray1, charArray0);
      
      boolean boolean0 = ToolBox.StringTools.containsAny((CharSequence) "aX", (CharSequence) "aX");
      assertTrue(boolean0);
      
      String string1 = ToolBox.StringTools.LF;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\n", string1);
      
      boolean boolean1 = ToolBox.StringTools.isAllLowerCase("\n");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ToolBox.StringTools.isCreatable("\n");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int2 = ToolBox.StringTools.indexOfAnyBut((CharSequence) "comp5111.assignment.cut.ToolBox$CharTools", charArray1);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'8', 'a'}, charArray1);
      assertEquals(0, int2);
      assertNotSame(charArray1, charArray0);
      
      int int3 = ToolBox.StringTools.indexOfAny("aX", charArray1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'8', 'a'}, charArray1);
      assertEquals(0, int3);
      assertNotSame(charArray1, charArray0);
      
      boolean boolean3 = ToolBox.ArrayTools.isEmpty(charArray1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'8', 'a'}, charArray1);
      assertFalse(boolean3);
      assertNotSame(charArray1, charArray0);
      
      boolean boolean4 = ToolBox.StringTools.equals((CharSequence) "comp5111.assignment.cut.ToolBox$CharTools", (CharSequence) "\n");
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'a';
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) '8';
      boolean boolean5 = ToolBox.ArrayTools.isEmpty(doubleArray0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {97.0, (-1.0), 56.0}, doubleArray0, 0.01);
      assertFalse(boolean5);
      
      Supplier<String> supplier1 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = ToolBox.StringTools.getIfEmpty("p", supplier1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("p", string2);
      
      ToolBox.StringTools toolBox_StringTools0 = new ToolBox.StringTools();
      assertNotNull(toolBox_StringTools0);
      assertEquals((-1), ToolBox.StringTools.INDEX_NOT_FOUND);
      
      short[] shortArray0 = new short[0];
      boolean boolean6 = ToolBox.ArrayTools.isEmpty(shortArray0);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean5);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean6);
      
      boolean boolean7 = ToolBox.StringTools.isCreatable("aX");
      assertTrue(boolean7 == boolean4);
      assertFalse(boolean7 == boolean0);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean2);
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean3);
      assertFalse(boolean7);
      
      String string3 = ToolBox.StringTools.EMPTY;
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ToolBox.CharSequenceTools toolBox_CharSequenceTools0 = new ToolBox.CharSequenceTools();
      assertNotNull(toolBox_CharSequenceTools0);
      
      ToolBox.ArrayTools toolBox_ArrayTools0 = new ToolBox.ArrayTools();
      assertNotNull(toolBox_ArrayTools0);
      assertEquals((-1), ToolBox.ArrayTools.INDEX_NOT_FOUND);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "@|T+*m@.?Ck:T:0b5p%";
      stringArray0[1] = "";
      stringArray0[2] = "yJS6]@th";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "8}[e?CO)WowyT-,N_";
      stringArray0[6] = "EIbj=4?LdA+d}O/K";
      stringArray0[7] = "";
      String string0 = ToolBox.StringTools.getCommonPrefix(stringArray0);
      assertEquals(8, stringArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = ToolBox.StringTools.isNumeric("");
      assertFalse(boolean0);
      
      Pattern pattern0 = Pattern.compile("");
      assertNotNull(pattern0);
      assertEquals("", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      
      Predicate<String> predicate0 = pattern0.asPredicate();
      assertNotNull(predicate0);
      assertEquals("", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      
      String string1 = ToolBox.RegExTools.replaceAll((String) null, pattern0, "8}[e?CO)WowyT-,N_");
      assertNull(string1);
      assertEquals("", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      
      boolean boolean1 = ToolBox.StringTools.isMixedCase("EIbj=4?LdA+d}O/K");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ToolBox.CharSequenceTools toolBox_CharSequenceTools1 = new ToolBox.CharSequenceTools();
      assertFalse(toolBox_CharSequenceTools1.equals((Object)toolBox_CharSequenceTools0));
      assertNotNull(toolBox_CharSequenceTools1);
      
      String string2 = ToolBox.RegExTools.replacePattern("", "", "8}[e?CO)WowyT-,N_");
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("8}[e?CO)WowyT-,N_", string2);
      
      Pattern pattern1 = Pattern.compile("", (-1));
      assertFalse(pattern1.equals((Object)pattern0));
      assertNotNull(pattern1);
      assertNotSame(pattern1, pattern0);
      assertEquals((-1), pattern1.flags());
      assertEquals("", pattern1.toString());
      assertEquals("", pattern1.pattern());
      
      String[] stringArray1 = pattern1.split((CharSequence) "", (-1));
      assertFalse(pattern1.equals((Object)pattern0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(pattern1, pattern0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals((-1), pattern1.flags());
      assertEquals("", pattern1.toString());
      assertEquals("", pattern1.pattern());
      
      String string3 = ToolBox.RegExTools.replaceAll("", pattern1, "yJS6]@th");
      assertFalse(pattern1.equals((Object)pattern0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("yJS6]@th", string3);
      assertNotSame(pattern1, pattern0);
      assertEquals((-1), pattern1.flags());
      assertEquals("", pattern1.toString());
      assertEquals("", pattern1.pattern());
      
      String string4 = ToolBox.RegExTools.replaceAll("", "B0A", "#");
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      int int0 = ToolBox.StringTools.indexOfAnyBut((CharSequence) "", (CharSequence) "8}[e?CO)WowyT-,N_");
      assertEquals((-1), int0);
      
      int int1 = ToolBox.StringTools.indexOfDifference(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(int1 == int0);
      assertEquals(8, stringArray0.length);
      assertEquals(0, int1);
      assertNotSame(stringArray0, stringArray1);
      
      boolean boolean2 = ToolBox.StringTools.isCreatable("B0A");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = '|';
      charArray0[2] = 'x';
      charArray0[3] = 'p';
      charArray0[4] = 'q';
      charArray0[5] = 'U';
      charArray0[6] = 'J';
      charArray0[7] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(9, charArray0.length);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'\u0000', '|', 'x', 'p', 'q', 'U', 'J', 'I', '\u0000'}, charArray0);
      assertEquals("\u0000|xpqUJI\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.capacity());
      assertEquals(9, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals(9, charBuffer0.remaining());
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(9, charArray0.length);
      assertNotNull(charBuffer1);
      assertArrayEquals(new char[] {'\u0000', '|', 'x', 'p', 'q', 'U', 'J', 'I', '\u0000'}, charArray0);
      assertEquals("\u0000|xpqUJI\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.capacity());
      assertEquals(9, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals(9, charBuffer0.remaining());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertEquals(9, charBuffer1.remaining());
      assertEquals(9, charBuffer1.capacity());
      assertEquals(9, charBuffer1.length());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(9, charBuffer1.limit());
      assertEquals("\u0000|xpqUJI\u0000", charBuffer1.toString());
      assertFalse(charBuffer1.hasArray());
      assertFalse(charBuffer1.isDirect());
      
      int int0 = ToolBox.StringTools.indexOfAny(charBuffer1, charArray0);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '|', 'x', 'p', 'q', 'U', 'J', 'I', '\u0000'}, charArray0);
      assertEquals(0, int0);
      assertEquals("\u0000|xpqUJI\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.capacity());
      assertEquals(9, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals(9, charBuffer0.remaining());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertEquals(9, charBuffer1.remaining());
      assertEquals(9, charBuffer1.capacity());
      assertEquals(9, charBuffer1.length());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(9, charBuffer1.limit());
      assertEquals("\u0000|xpqUJI\u0000", charBuffer1.toString());
      assertFalse(charBuffer1.hasArray());
      assertFalse(charBuffer1.isDirect());
      
      int int1 = ToolBox.StringTools.indexOfAnyBut((CharSequence) charBuffer0, (CharSequence) charBuffer0);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertFalse(int1 == int0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '|', 'x', 'p', 'q', 'U', 'J', 'I', '\u0000'}, charArray0);
      assertEquals((-1), int1);
      assertEquals("\u0000|xpqUJI\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.capacity());
      assertEquals(9, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals(9, charBuffer0.remaining());
      
      boolean boolean0 = ToolBox.ArrayTools.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      String string0 = ToolBox.RegExTools.replaceFirst("eonKHtK?z6fX6,1", "eonKHtK?z6fX6,1", "");
      assertNotNull(string0);
      assertEquals("eonKHtK?z6fX6,1", string0);
      
      boolean boolean1 = ToolBox.StringTools.isMixedCase("eonKHtK?z6fX6,1");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ToolBox.LocaleTools toolBox_LocaleTools0 = new ToolBox.LocaleTools();
      assertNotNull(toolBox_LocaleTools0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean2 = ToolBox.ArrayTools.isEmpty(booleanArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertFalse(boolean2);
      
      int int2 = ToolBox.CharSequenceTools.lastIndexOf(charBuffer1, 0, 0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '|', 'x', 'p', 'q', 'U', 'J', 'I', '\u0000'}, charArray0);
      assertEquals(0, int2);
      assertEquals("\u0000|xpqUJI\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.capacity());
      assertEquals(9, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals(9, charBuffer0.remaining());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertEquals(9, charBuffer1.remaining());
      assertEquals(9, charBuffer1.capacity());
      assertEquals(9, charBuffer1.length());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(9, charBuffer1.limit());
      assertEquals("\u0000|xpqUJI\u0000", charBuffer1.toString());
      assertFalse(charBuffer1.hasArray());
      assertFalse(charBuffer1.isDirect());
      
      boolean boolean3 = ToolBox.StringTools.isAllLowerCase(charBuffer0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '|', 'x', 'p', 'q', 'U', 'J', 'I', '\u0000'}, charArray0);
      assertFalse(boolean3);
      assertEquals("\u0000|xpqUJI\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.capacity());
      assertEquals(9, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals(9, charBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = ToolBox.StringTools.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      CharSequence charSequence0 = ToolBox.StringTools.getIfEmpty((CharSequence) " ", (Supplier<CharSequence>) null);
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals(" ", charSequence0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) " ");
      assertNotNull(charBuffer0);
      assertEquals(" ", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      
      boolean boolean0 = ToolBox.StringTools.isEmpty(charBuffer0);
      assertFalse(boolean0);
      assertEquals(" ", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      
      CharBuffer charBuffer1 = CharBuffer.allocate(1);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(1, charBuffer1.remaining());
      assertEquals(1, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(1, charBuffer1.length());
      assertEquals(1, charBuffer1.limit());
      assertEquals("\u0000", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      
      int int0 = ToolBox.CharSequenceTools.indexOf(charBuffer0, " ", 13);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertEquals((-1), int0);
      assertEquals(" ", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      
      char[] charArray0 = ToolBox.CharSequenceTools.toCharArray(charBuffer0);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {' '}, charArray0);
      assertEquals(" ", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      
      boolean boolean1 = ToolBox.StringTools.isCreatable("Zp,4j*+u0MVC");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ToolBox.ArrayTools.isEmpty(charArray0);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {' '}, charArray0);
      assertFalse(boolean2);
      assertEquals(" ", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      
      int int1 = ToolBox.StringTools.indexOfAnyBut((CharSequence) " ", (CharSequence) " ");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = ToolBox.CharSequenceTools.lastIndexOf(charBuffer0, " ", 1);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      assertEquals(" ", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      
      boolean boolean3 = ToolBox.CharSequenceTools.regionMatches("Zp,4j*+u0MVC", false, (-1), charBuffer0, (-2706), (-1));
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      assertEquals(" ", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      
      int int3 = ToolBox.CharSequenceTools.lastIndexOf(" ", charBuffer0, 71);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      assertEquals(" ", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      
      int int4 = ToolBox.StringTools.indexOfAnyBut((CharSequence) " ", (CharSequence) "Zp,4j*+u0MVC");
      assertTrue(int4 == int2);
      assertFalse(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals(0, int4);
      
      boolean boolean4 = ToolBox.StringTools.equals((CharSequence) charBuffer1, (CharSequence) charBuffer1);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4);
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(1, charBuffer1.remaining());
      assertEquals(1, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(1, charBuffer1.length());
      assertEquals(1, charBuffer1.limit());
      assertEquals("\u0000", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      
      int int5 = ToolBox.CharSequenceTools.indexOf(charBuffer1, 0, (-1));
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertFalse(int5 == int1);
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertTrue(int5 == int4);
      assertFalse(int5 == int0);
      assertEquals(0, int5);
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(1, charBuffer1.remaining());
      assertEquals(1, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(1, charBuffer1.length());
      assertEquals(1, charBuffer1.limit());
      assertEquals("\u0000", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = ToolBox.StringTools.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      CharSequence charSequence0 = ToolBox.StringTools.getIfEmpty((CharSequence) " ", (Supplier<CharSequence>) null);
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals(" ", charSequence0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) " ");
      assertNotNull(charBuffer0);
      assertEquals(1, charBuffer0.length());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.limit());
      
      boolean boolean0 = ToolBox.StringTools.isEmpty(charBuffer0);
      assertFalse(boolean0);
      assertEquals(1, charBuffer0.length());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.limit());
      
      CharBuffer charBuffer1 = CharBuffer.allocate(1);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertEquals(1, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(1, charBuffer1.remaining());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(1, charBuffer1.limit());
      assertTrue(charBuffer1.hasArray());
      assertEquals("\u0000", charBuffer1.toString());
      assertEquals(1, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.hasRemaining());
      
      int int0 = ToolBox.CharSequenceTools.indexOf(charBuffer0, " ", 13);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertEquals((-1), int0);
      assertEquals(1, charBuffer0.length());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.limit());
      
      Buffer buffer0 = charBuffer0.position(1);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertNotNull(buffer0);
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.position());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(buffer0.hasRemaining());
      assertEquals(1, buffer0.position());
      assertTrue(buffer0.isReadOnly());
      assertEquals(0, buffer0.remaining());
      assertEquals(1, buffer0.capacity());
      assertFalse(buffer0.hasArray());
      assertFalse(buffer0.isDirect());
      assertEquals(1, buffer0.limit());
      
      char[] charArray0 = ToolBox.CharSequenceTools.toCharArray(charBuffer0);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.position());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.remaining());
      
      boolean boolean1 = ToolBox.StringTools.isCreatable("Zp,4j*+u0MVC");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ToolBox.ArrayTools.isEmpty(charArray0);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean2);
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.position());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.remaining());
      
      int int1 = ToolBox.StringTools.indexOfAnyBut((CharSequence) " ", (CharSequence) " ");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = ToolBox.CharSequenceTools.lastIndexOf(charBuffer0, " ", 1);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.position());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.remaining());
      
      boolean boolean3 = ToolBox.CharSequenceTools.regionMatches("Zp,4j*+u0MVC", false, (-1), charBuffer0, (-2706), (-1));
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.position());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.remaining());
      
      int int3 = ToolBox.CharSequenceTools.lastIndexOf(" ", charBuffer0, 71);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(1, int3);
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.position());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.remaining());
      
      int int4 = ToolBox.StringTools.indexOfAnyBut((CharSequence) " ", (CharSequence) "Zp,4j*+u0MVC");
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertEquals(0, int4);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = '.';
      charArray0[2] = 'J';
      charArray0[3] = 'x';
      charArray0[4] = 'i';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'.', '.', 'J', 'x', 'i'}, charArray0);
      assertEquals(5, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("..Jxi", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(5, charBuffer0.length());
      assertEquals(5, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.capacity());
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(charBuffer0).when(supplier0).get();
      CharSequence charSequence0 = ToolBox.StringTools.getIfEmpty((CharSequence) null, supplier0);
      assertEquals(5, charArray0.length);
      assertNotNull(charSequence0);
      assertArrayEquals(new char[] {'.', '.', 'J', 'x', 'i'}, charArray0);
      assertEquals(5, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("..Jxi", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(5, charBuffer0.length());
      assertEquals(5, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(5, charSequence0.length());
      assertEquals("..Jxi", charSequence0.toString());
      
      int int0 = ToolBox.CharSequenceTools.lastIndexOf(charSequence0, charSequence0, 4131);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'.', '.', 'J', 'x', 'i'}, charArray0);
      assertEquals(0, int0);
      assertEquals(5, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("..Jxi", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(5, charBuffer0.length());
      assertEquals(5, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(5, charSequence0.length());
      assertEquals("..Jxi", charSequence0.toString());
      
      String string0 = ToolBox.RegExTools.replaceFirst("!a$", "zM", "p");
      assertNotNull(string0);
      assertEquals("!a$", string0);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '8';
      charArray1[1] = 'a';
      int int1 = ToolBox.CharSequenceTools.lastIndexOf(charSequence0, charSequence0, 0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertTrue(int1 == int0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'.', '.', 'J', 'x', 'i'}, charArray0);
      assertEquals(0, int1);
      assertNotSame(charArray0, charArray1);
      assertEquals(5, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("..Jxi", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(5, charBuffer0.length());
      assertEquals(5, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(5, charSequence0.length());
      assertEquals("..Jxi", charSequence0.toString());
      
      boolean boolean0 = ToolBox.StringTools.containsAny((CharSequence) "!a$", (CharSequence) "!a$");
      assertTrue(boolean0);
      
      String string1 = ToolBox.StringTools.LF;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\n", string1);
      
      boolean boolean1 = ToolBox.StringTools.isAllLowerCase("\n");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ToolBox.StringTools.isCreatable("\n");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int2 = ToolBox.StringTools.indexOfAnyBut((CharSequence) "zM", charArray1);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'8', 'a'}, charArray1);
      assertEquals(0, int2);
      assertNotSame(charArray1, charArray0);
      
      int int3 = ToolBox.StringTools.indexOfAny("!a$", charArray1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'8', 'a'}, charArray1);
      assertEquals(1, int3);
      assertNotSame(charArray1, charArray0);
      
      boolean boolean3 = ToolBox.ArrayTools.isEmpty(charArray1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'8', 'a'}, charArray1);
      assertFalse(boolean3);
      assertNotSame(charArray1, charArray0);
      
      boolean boolean4 = ToolBox.StringTools.equals((CharSequence) "zM", (CharSequence) "\n");
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'a';
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) '8';
      boolean boolean5 = ToolBox.ArrayTools.isEmpty(doubleArray0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 56.0}, doubleArray0, 0.01);
      assertFalse(boolean5);
      
      Supplier<String> supplier1 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = ToolBox.StringTools.getIfEmpty("p", supplier1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("p", string2);
      
      ToolBox.StringTools toolBox_StringTools0 = new ToolBox.StringTools();
      assertNotNull(toolBox_StringTools0);
      assertEquals((-1), ToolBox.StringTools.INDEX_NOT_FOUND);
      
      short[] shortArray0 = new short[0];
      boolean boolean6 = ToolBox.ArrayTools.isEmpty(shortArray0);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean2);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean6);
      
      boolean boolean7 = ToolBox.StringTools.isCreatable("!a$");
      assertTrue(boolean7 == boolean3);
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean2);
      assertFalse(boolean7 == boolean0);
      assertFalse(boolean7);
      
      String string3 = ToolBox.RegExTools.replaceAll("!a$", "", "zM");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("zM!zMazM$zM", string3);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = ToolBox.StringTools.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      CharSequence charSequence0 = ToolBox.StringTools.getIfEmpty((CharSequence) " ", (Supplier<CharSequence>) null);
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals(" ", charSequence0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) " ");
      assertNotNull(charBuffer0);
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      
      boolean boolean0 = ToolBox.StringTools.isEmpty(charBuffer0);
      assertFalse(boolean0);
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      
      CharBuffer charBuffer1 = CharBuffer.allocate(1);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertEquals(1, charBuffer1.limit());
      assertEquals(1, charBuffer1.remaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals("\u0000", charBuffer1.toString());
      assertEquals(1, charBuffer1.length());
      assertEquals(0, charBuffer1.arrayOffset());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(1, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      
      int int0 = ToolBox.CharSequenceTools.indexOf(charBuffer0, " ", 13);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertEquals((-1), int0);
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      
      char[] charArray0 = ToolBox.CharSequenceTools.toCharArray(charBuffer0);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {' '}, charArray0);
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      
      boolean boolean1 = ToolBox.StringTools.isCreatable("Zp,4j*+u0MVC");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ToolBox.ArrayTools.isEmpty(charArray0);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {' '}, charArray0);
      assertFalse(boolean2);
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      
      int int1 = ToolBox.StringTools.indexOfAnyBut((CharSequence) " ", (CharSequence) " ");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = ToolBox.CharSequenceTools.lastIndexOf(charBuffer0, " ", 1);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      
      boolean boolean3 = ToolBox.CharSequenceTools.regionMatches("Zp,4j*+u0MVC", false, (-1), charBuffer0, (-2706), (-1));
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      
      int int3 = ToolBox.CharSequenceTools.lastIndexOf(" ", charBuffer0, 71);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(0, int3);
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      
      int int4 = ToolBox.StringTools.indexOfAnyBut((CharSequence) " ", (CharSequence) "Zp,4j*+u0MVC");
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertEquals(0, int4);
      
      boolean boolean4 = ToolBox.StringTools.equals((CharSequence) " ", (CharSequence) charBuffer1);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      assertEquals(1, charBuffer1.limit());
      assertEquals(1, charBuffer1.remaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals("\u0000", charBuffer1.toString());
      assertEquals(1, charBuffer1.length());
      assertEquals(0, charBuffer1.arrayOffset());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(1, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = ToolBox.StringTools.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "\r");
      assertNotNull(charBuffer0);
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals("\r", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.limit());
      
      int int0 = ToolBox.CharSequenceTools.lastIndexOf(charBuffer0, 4631, 2);
      assertEquals((-1), int0);
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals("\r", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.limit());
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 4631;
      longArray0[3] = (long) (-1);
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L), 4631L, (-1L)}, longArray0);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '^';
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertEquals(1, charArray0.length);
      assertNotNull(charBuffer1);
      assertArrayEquals(new char[] {'^'}, charArray0);
      assertEquals("^", charBuffer1.toString());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(1, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(1, charBuffer1.remaining());
      assertTrue(charBuffer1.hasArray());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.position());
      assertEquals(1, charBuffer1.capacity());
      assertEquals(1, charBuffer1.limit());
      
      boolean boolean1 = ToolBox.CharSequenceTools.regionMatches(charBuffer0, false, 65536, charBuffer0, 4631, 55);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals("\r", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.limit());
      
      boolean boolean2 = ToolBox.StringTools.isAllUpperCase(charBuffer0);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals("\r", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.limit());
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '^';
      intArray0[1] = (int) '^';
      intArray0[2] = 4631;
      boolean boolean3 = ToolBox.ArrayTools.isEmpty(intArray0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {94, 94, 4631}, intArray0);
      assertFalse(boolean3);
      
      boolean boolean4 = ToolBox.ArrayTools.isEmpty(longArray0);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L), 4631L, (-1L)}, longArray0);
      assertFalse(boolean4);
      
      CharSequence charSequence0 = null;
      CharBuffer charBuffer2 = CharBuffer.wrap(charArray0);
      assertTrue(charBuffer2.equals((Object)charBuffer1));
      assertFalse(charBuffer2.equals((Object)charBuffer0));
      assertEquals(1, charArray0.length);
      assertNotNull(charBuffer2);
      assertArrayEquals(new char[] {'^'}, charArray0);
      assertNotSame(charBuffer2, charBuffer1);
      assertTrue(charBuffer2.hasRemaining());
      assertFalse(charBuffer2.isDirect());
      assertEquals("^", charBuffer2.toString());
      assertTrue(charBuffer2.hasArray());
      assertEquals(1, charBuffer2.length());
      assertEquals(0, charBuffer2.arrayOffset());
      assertEquals(1, charBuffer2.limit());
      assertEquals(1, charBuffer2.remaining());
      assertEquals(1, charBuffer2.capacity());
      assertEquals(0, charBuffer2.position());
      assertFalse(charBuffer2.isReadOnly());
      
      int int1 = ToolBox.StringTools.indexOfAnyBut((CharSequence) null, (CharSequence) charBuffer2);
      assertTrue(charBuffer2.equals((Object)charBuffer1));
      assertFalse(charBuffer2.equals((Object)charBuffer0));
      assertTrue(int1 == int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'^'}, charArray0);
      assertEquals((-1), int1);
      assertNotSame(charBuffer2, charBuffer1);
      assertTrue(charBuffer2.hasRemaining());
      assertFalse(charBuffer2.isDirect());
      assertEquals("^", charBuffer2.toString());
      assertTrue(charBuffer2.hasArray());
      assertEquals(1, charBuffer2.length());
      assertEquals(0, charBuffer2.arrayOffset());
      assertEquals(1, charBuffer2.limit());
      assertEquals(1, charBuffer2.remaining());
      assertEquals(1, charBuffer2.capacity());
      assertEquals(0, charBuffer2.position());
      assertFalse(charBuffer2.isReadOnly());
      
      // Undeclared exception!
      try { 
        ToolBox.CharSequenceTools.regionMatches(charBuffer0, false, 48, (CharSequence) null, (-1), 4631);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("comp5111.assignment.cut.ToolBox$CharSequenceTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[2] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[3] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      objectArray0[4] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertNotNull(object4);
      
      objectArray0[1] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object1));
      assertNotNull(object5);
      
      objectArray0[6] = object5;
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(objectArray0);
      assertEquals(7, objectArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[19];
      stringArray0[0] = "-";
      String string0 = ToolBox.StringTools.getCommonPrefix(stringArray0);
      assertEquals(19, stringArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = ToolBox.StringTools.getCommonPrefix(stringArray0);
      assertEquals(19, stringArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      boolean boolean1 = ToolBox.StringTools.isCreatable("-");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = ToolBox.StringTools.compare("", "", false);
      assertEquals(0, int0);
      
      boolean boolean2 = ToolBox.StringTools.isAllUpperCase("");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = 'h';
      charArray0[2] = '\'';
      charArray0[3] = '^';
      charArray0[4] = '#';
      charArray0[5] = 'X';
      charArray0[6] = '@';
      charArray0[7] = '^';
      charArray0[8] = '3';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-953), (int) (byte)3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = ToolBox.ArrayTools.isEmpty((byte[]) null);
      assertTrue(boolean0);
      
      Pattern pattern0 = Pattern.compile("", 1742);
      assertNotNull(pattern0);
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      assertEquals(1742, pattern0.flags());
      
      String string0 = "";
      String string1 = ToolBox.RegExTools.replaceFirst("", pattern0, "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      assertEquals(1742, pattern0.flags());
      
      Stream<String> stream0 = pattern0.splitAsStream("");
      assertNotNull(stream0);
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      assertEquals(1742, pattern0.flags());
      
      char[] charArray0 = new char[3];
      String[] stringArray0 = new String[2];
      stringArray0[0] = "g0xp]>EXZ-^e";
      stringArray0[1] = "";
      String string2 = ToolBox.StringTools.getCommonPrefix(stringArray0);
      assertTrue(string2.equals((Object)string1));
      assertEquals(2, stringArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      
      Stream<String> stream1 = pattern0.splitAsStream("");
      assertFalse(stream1.equals((Object)stream0));
      assertNotNull(stream1);
      assertNotSame(stream1, stream0);
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      assertEquals(1742, pattern0.flags());
      
      charArray0[1] = '?';
      String[] stringArray1 = pattern0.split((CharSequence) "", (-1759));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      assertEquals(1742, pattern0.flags());
      
      charArray0[2] = '!';
      int int0 = ToolBox.StringTools.indexOfAny("", charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '?', '!'}, charArray0);
      assertEquals((-1), int0);
      
      int int1 = ToolBox.StringTools.compareIgnoreCase((String) null, "", false);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      char[] charArray1 = ToolBox.CharSequenceTools.toCharArray("g0xp]>EXZ-^e");
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(12, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean boolean1 = ToolBox.StringTools.containsAny((CharSequence) "", charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(12, charArray1.length);
      assertFalse(boolean1);
      assertNotSame(charArray1, charArray0);
      
      boolean boolean2 = ToolBox.StringTools.isCreatable("g0xp]>EXZ-^e");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        ToolBox.LocaleTools.toLocale("g0xp]>EXZ-^e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: g0xp]>EXZ-^e
         //
         verifyException("comp5111.assignment.cut.ToolBox$LocaleTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = ToolBox.StringTools.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      CharSequence charSequence0 = ToolBox.StringTools.getIfEmpty((CharSequence) " ", (Supplier<CharSequence>) null);
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals(" ", charSequence0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) " ");
      assertNotNull(charBuffer0);
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.limit());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      
      boolean boolean0 = ToolBox.StringTools.isEmpty(charBuffer0);
      assertFalse(boolean0);
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.limit());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      
      CharBuffer charBuffer1 = CharBuffer.allocate(1);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(1, charBuffer1.length());
      assertTrue(charBuffer1.hasArray());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(1, charBuffer1.capacity());
      assertEquals(1, charBuffer1.limit());
      assertEquals("\u0000", charBuffer1.toString());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertEquals(1, charBuffer1.remaining());
      
      int int0 = ToolBox.CharSequenceTools.indexOf(charBuffer0, " ", 13);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertEquals((-1), int0);
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.limit());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      
      char[] charArray0 = ToolBox.CharSequenceTools.toCharArray(charBuffer0);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {' '}, charArray0);
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.limit());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      
      boolean boolean1 = ToolBox.StringTools.isCreatable("Zp,4j*+u0MVC");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ToolBox.ArrayTools.isEmpty(charArray0);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {' '}, charArray0);
      assertFalse(boolean2);
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.limit());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      
      int int1 = ToolBox.StringTools.indexOfAnyBut((CharSequence) " ", (CharSequence) " ");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = ToolBox.CharSequenceTools.lastIndexOf(charBuffer0, " ", 1);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.limit());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      
      boolean boolean3 = ToolBox.CharSequenceTools.regionMatches("Zp,4j*+u0MVC", false, (-1), charBuffer0, (-2706), (-1));
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.limit());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      
      int int3 = ToolBox.CharSequenceTools.lastIndexOf(" ", charBuffer0, 71);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(0, int3);
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.limit());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      
      int int4 = ToolBox.StringTools.indexOfAnyBut((CharSequence) " ", (CharSequence) "Zp,4j*+u0MVC");
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertEquals(0, int4);
      
      int int5 = ToolBox.StringTools.indexOfAny(charBuffer0, charArray0);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertTrue(int5 == int4);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {' '}, charArray0);
      assertEquals(0, int5);
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.limit());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)1093;
      shortArray0[2] = (short)13;
      shortArray0[3] = (short)55;
      shortArray0[4] = (short)46;
      boolean boolean4 = ToolBox.ArrayTools.isEmpty(shortArray0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)1093, (short)13, (short)55, (short)46}, shortArray0);
      assertFalse(boolean4);
      
      boolean boolean5 = ToolBox.CharSequenceTools.regionMatches(charBuffer1, false, 7, "Zp,4j*+u0MVC", 1, 0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5);
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(1, charBuffer1.length());
      assertTrue(charBuffer1.hasArray());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(1, charBuffer1.capacity());
      assertEquals(1, charBuffer1.limit());
      assertEquals("\u0000", charBuffer1.toString());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertEquals(1, charBuffer1.remaining());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 2097;
      intArray0[1] = 2097;
      intArray0[2] = 2097;
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {2097, 2097, 2097}, intArray0);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[5];
      String string0 = ToolBox.StringTools.getCommonPrefix(stringArray0);
      assertEquals(5, stringArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean1 = ToolBox.StringTools.isAllLowerCase(stringArray0[0]);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ']';
      charArray0[1] = ')';
      charArray0[2] = '_';
      boolean boolean2 = ToolBox.StringTools.containsAny((CharSequence) stringArray0[2], charArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(5, stringArray0.length);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {']', ')', '_'}, charArray0);
      assertFalse(boolean2);
      
      int int0 = ToolBox.CharSequenceTools.indexOf("", "", 2097);
      assertEquals(0, int0);
      
      boolean boolean3 = ToolBox.StringTools.containsNone(stringArray0[2], charArray0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertEquals(5, stringArray0.length);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {']', ')', '_'}, charArray0);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((CharSequence) null).when(supplier0).get();
      CharSequence charSequence0 = ToolBox.StringTools.getIfEmpty((CharSequence) null, supplier0);
      assertNull(charSequence0);
      
      int int0 = ToolBox.CharSequenceTools.lastIndexOf((CharSequence) null, (CharSequence) null, 4131);
      assertEquals((-1), int0);
      
      String string0 = ToolBox.RegExTools.replaceFirst("?aX", "", "p");
      assertNotNull(string0);
      assertEquals("p?aX", string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '8';
      charArray0[1] = 'a';
      int int1 = ToolBox.StringTools.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = ToolBox.StringTools.containsAny((CharSequence) "?aX", (CharSequence) "p?aX");
      assertTrue(boolean0);
      
      String string1 = ToolBox.StringTools.LF;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\n", string1);
      
      boolean boolean1 = ToolBox.StringTools.isAllLowerCase("\n");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ToolBox.StringTools.isCreatable("\n");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int2 = ToolBox.StringTools.indexOfAnyBut((CharSequence) "", charArray0);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', 'a'}, charArray0);
      assertEquals((-1), int2);
      
      int int3 = ToolBox.StringTools.indexOfAny("?aX", charArray0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', 'a'}, charArray0);
      assertEquals(1, int3);
      
      boolean boolean3 = ToolBox.ArrayTools.isEmpty(charArray0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', 'a'}, charArray0);
      assertFalse(boolean3);
      
      boolean boolean4 = ToolBox.StringTools.equals((CharSequence) "", (CharSequence) "\n");
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'a';
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) '8';
      boolean boolean5 = ToolBox.ArrayTools.isEmpty(doubleArray0);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {97.0, (-1.0), 56.0}, doubleArray0, 0.01);
      assertFalse(boolean5);
      
      Supplier<String> supplier1 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = ToolBox.StringTools.getIfEmpty("p", supplier1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("p", string2);
      
      ToolBox.StringTools toolBox_StringTools0 = new ToolBox.StringTools();
      assertNotNull(toolBox_StringTools0);
      assertEquals((-1), ToolBox.StringTools.INDEX_NOT_FOUND);
      
      short[] shortArray0 = new short[0];
      boolean boolean6 = ToolBox.ArrayTools.isEmpty(shortArray0);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean5);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean6);
      
      boolean boolean7 = ToolBox.StringTools.isCreatable("?aX");
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean5);
      assertFalse(boolean7 == boolean0);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean4);
      assertFalse(boolean7);
      
      String string3 = ToolBox.RegExTools.replaceAll("p?aX", "", "");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("p?aX", string3);
      
      int int4 = ToolBox.CharSequenceTools.indexOf("p", "?aX", 1966);
      assertFalse(int4 == int3);
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertEquals((-1), int4);
      
      boolean boolean8 = ToolBox.StringTools.isMixedCase("?aX");
      assertFalse(boolean8 == boolean2);
      assertFalse(boolean8 == boolean1);
      assertTrue(boolean8 == boolean6);
      assertFalse(boolean8 == boolean7);
      assertFalse(boolean8 == boolean3);
      assertFalse(boolean8 == boolean5);
      assertTrue(boolean8 == boolean0);
      assertFalse(boolean8 == boolean4);
      assertTrue(boolean8);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = ToolBox.RegExTools.replacePattern("M", "", "");
      assertNotNull(string0);
      assertEquals("M", string0);
      
      boolean boolean0 = ToolBox.StringTools.isEmpty("M");
      assertFalse(boolean0);
      
      ToolBox toolBox0 = new ToolBox();
      assertNotNull(toolBox0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean boolean1 = ToolBox.ArrayTools.isEmpty(booleanArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertFalse(boolean1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '4';
      charArray0[1] = '2';
      charArray0[2] = '4';
      charArray0[3] = '~';
      boolean boolean2 = ToolBox.ArrayTools.isEmpty(charArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'4', '2', '4', '~'}, charArray0);
      assertFalse(boolean2);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(3451);
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(3451, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals(3451, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(3451, charBuffer0.length());
      assertEquals(3451, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      
      CharBuffer charBuffer1 = charBuffer0.put('4');
      assertNotNull(charBuffer1);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(3451, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.position());
      assertEquals(3450, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(3451, charBuffer0.capacity());
      assertEquals(3450, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer1.hasArray());
      assertEquals(3451, charBuffer1.limit());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(3450, charBuffer1.remaining());
      assertFalse(charBuffer1.isDirect());
      assertEquals(1, charBuffer1.position());
      assertEquals(3450, charBuffer1.length());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(3451, charBuffer1.capacity());
      
      int int0 = ToolBox.StringTools.indexOfAnyBut((CharSequence) charBuffer0, (CharSequence) "M");
      assertEquals(0, int0);
      assertSame(charBuffer0, charBuffer1);
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(3451, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.position());
      assertEquals(3450, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(3451, charBuffer0.capacity());
      assertEquals(3450, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "M";
      stringArray0[1] = "M";
      stringArray0[2] = "M";
      stringArray0[3] = "t@";
      String string1 = ToolBox.StringTools.getCommonPrefix(stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(4, stringArray0.length);
      assertNotNull(string1);
      assertEquals("M", string1);
      
      int int1 = ToolBox.CharSequenceTools.lastIndexOf(charBuffer1, 10, 10);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(3451, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.position());
      assertEquals(3450, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(3451, charBuffer0.capacity());
      assertEquals(3450, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer1.hasArray());
      assertEquals(3451, charBuffer1.limit());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(3450, charBuffer1.remaining());
      assertFalse(charBuffer1.isDirect());
      assertEquals(1, charBuffer1.position());
      assertEquals(3450, charBuffer1.length());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(3451, charBuffer1.capacity());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '[';
      charArray0[1] = '|';
      charArray0[2] = 'x';
      charArray0[3] = 'p';
      charArray0[4] = 'q';
      charArray0[5] = 'U';
      charArray0[6] = 'J';
      charArray0[7] = 'I';
      charArray0[8] = 'c';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(9, charArray0.length);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'[', '|', 'x', 'p', 'q', 'U', 'J', 'I', 'c'}, charArray0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(9, charBuffer0.remaining());
      assertEquals(9, charBuffer0.capacity());
      assertEquals("[|xpqUJIc", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(9, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.limit());
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(9, charArray0.length);
      assertNotNull(charBuffer1);
      assertArrayEquals(new char[] {'[', '|', 'x', 'p', 'q', 'U', 'J', 'I', 'c'}, charArray0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(9, charBuffer0.remaining());
      assertEquals(9, charBuffer0.capacity());
      assertEquals("[|xpqUJIc", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(9, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.limit());
      assertEquals(9, charBuffer1.capacity());
      assertEquals(9, charBuffer1.limit());
      assertEquals("[|xpqUJIc", charBuffer1.toString());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.position());
      assertEquals(9, charBuffer1.remaining());
      assertFalse(charBuffer1.hasArray());
      assertFalse(charBuffer1.isDirect());
      assertEquals(9, charBuffer1.length());
      assertTrue(charBuffer1.isReadOnly());
      
      int int0 = ToolBox.StringTools.indexOfAny(charBuffer1, charArray0);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'[', '|', 'x', 'p', 'q', 'U', 'J', 'I', 'c'}, charArray0);
      assertEquals(0, int0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(9, charBuffer0.remaining());
      assertEquals(9, charBuffer0.capacity());
      assertEquals("[|xpqUJIc", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(9, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.limit());
      assertEquals(9, charBuffer1.capacity());
      assertEquals(9, charBuffer1.limit());
      assertEquals("[|xpqUJIc", charBuffer1.toString());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.position());
      assertEquals(9, charBuffer1.remaining());
      assertFalse(charBuffer1.hasArray());
      assertFalse(charBuffer1.isDirect());
      assertEquals(9, charBuffer1.length());
      assertTrue(charBuffer1.isReadOnly());
      
      int int1 = ToolBox.StringTools.indexOfAnyBut((CharSequence) charBuffer0, (CharSequence) charBuffer0);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertFalse(int1 == int0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'[', '|', 'x', 'p', 'q', 'U', 'J', 'I', 'c'}, charArray0);
      assertEquals((-1), int1);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(9, charBuffer0.remaining());
      assertEquals(9, charBuffer0.capacity());
      assertEquals("[|xpqUJIc", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(9, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.limit());
      
      boolean boolean0 = ToolBox.ArrayTools.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      String string0 = ToolBox.RegExTools.replaceFirst("eonKHtK?z6fX6,1", "eonKHtK?z6fX6,1", "");
      assertNotNull(string0);
      assertEquals("eonKHtK?z6fX6,1", string0);
      
      boolean boolean1 = ToolBox.StringTools.isMixedCase("eonKHtK?z6fX6,1");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ToolBox.LocaleTools toolBox_LocaleTools0 = new ToolBox.LocaleTools();
      assertNotNull(toolBox_LocaleTools0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean2 = ToolBox.ArrayTools.isEmpty(booleanArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertFalse(boolean2);
      
      int int2 = ToolBox.CharSequenceTools.lastIndexOf(charBuffer1, 0, 0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'[', '|', 'x', 'p', 'q', 'U', 'J', 'I', 'c'}, charArray0);
      assertEquals((-1), int2);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(9, charBuffer0.remaining());
      assertEquals(9, charBuffer0.capacity());
      assertEquals("[|xpqUJIc", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(9, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.limit());
      assertEquals(9, charBuffer1.capacity());
      assertEquals(9, charBuffer1.limit());
      assertEquals("[|xpqUJIc", charBuffer1.toString());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.position());
      assertEquals(9, charBuffer1.remaining());
      assertFalse(charBuffer1.hasArray());
      assertFalse(charBuffer1.isDirect());
      assertEquals(9, charBuffer1.length());
      assertTrue(charBuffer1.isReadOnly());
      
      boolean boolean3 = ToolBox.StringTools.isAllLowerCase(charBuffer0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'[', '|', 'x', 'p', 'q', 'U', 'J', 'I', 'c'}, charArray0);
      assertFalse(boolean3);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(9, charBuffer0.remaining());
      assertEquals(9, charBuffer0.capacity());
      assertEquals("[|xpqUJIc", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(9, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.limit());
      
      boolean boolean4 = ToolBox.ArrayTools.isEmpty((long[]) null);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "eonKHtK?z6fX6,1";
      stringArray0[1] = "";
      stringArray0[2] = "eonKHtK?z6fX6,1";
      stringArray0[3] = "eonKHtK?z6fX6,1";
      stringArray0[4] = "eonKHtK?z6fX6,1";
      String string1 = ToolBox.StringTools.getCommonPrefix(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '[';
      charArray0[1] = '|';
      charArray0[2] = 'x';
      charArray0[3] = 'p';
      charArray0[4] = 'q';
      charArray0[5] = 'U';
      charArray0[6] = 'J';
      charArray0[7] = 'I';
      charArray0[8] = 'c';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(9, charArray0.length);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'[', '|', 'x', 'p', 'q', 'U', 'J', 'I', 'c'}, charArray0);
      assertEquals(9, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.remaining());
      assertEquals("[|xpqUJIc", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(9, charBuffer0.length());
      assertEquals(9, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(9, charArray0.length);
      assertNotNull(charBuffer1);
      assertArrayEquals(new char[] {'[', '|', 'x', 'p', 'q', 'U', 'J', 'I', 'c'}, charArray0);
      assertEquals(9, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.remaining());
      assertEquals("[|xpqUJIc", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(9, charBuffer0.length());
      assertEquals(9, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(9, charBuffer1.limit());
      assertFalse(charBuffer1.isDirect());
      assertEquals(9, charBuffer1.remaining());
      assertEquals(9, charBuffer1.length());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.hasArray());
      assertEquals(9, charBuffer1.capacity());
      assertEquals("[|xpqUJIc", charBuffer1.toString());
      assertTrue(charBuffer1.hasRemaining());
      
      int int0 = ToolBox.StringTools.indexOfAny(charBuffer1, charArray0);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'[', '|', 'x', 'p', 'q', 'U', 'J', 'I', 'c'}, charArray0);
      assertEquals(0, int0);
      assertEquals(9, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.remaining());
      assertEquals("[|xpqUJIc", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(9, charBuffer0.length());
      assertEquals(9, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(9, charBuffer1.limit());
      assertFalse(charBuffer1.isDirect());
      assertEquals(9, charBuffer1.remaining());
      assertEquals(9, charBuffer1.length());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.hasArray());
      assertEquals(9, charBuffer1.capacity());
      assertEquals("[|xpqUJIc", charBuffer1.toString());
      assertTrue(charBuffer1.hasRemaining());
      
      int int1 = ToolBox.StringTools.indexOfAnyBut((CharSequence) charBuffer0, (CharSequence) charBuffer0);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertFalse(int1 == int0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'[', '|', 'x', 'p', 'q', 'U', 'J', 'I', 'c'}, charArray0);
      assertEquals((-1), int1);
      assertEquals(9, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.remaining());
      assertEquals("[|xpqUJIc", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(9, charBuffer0.length());
      assertEquals(9, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      
      boolean boolean0 = ToolBox.ArrayTools.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      String string0 = ToolBox.RegExTools.replaceFirst("eonKHtK?z6fX6,1", "eonKHtK?z6fX6,1", "");
      assertNotNull(string0);
      assertEquals("eonKHtK?z6fX6,1", string0);
      
      boolean boolean1 = ToolBox.StringTools.isMixedCase("eonKHtK?z6fX6,1");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ToolBox.LocaleTools toolBox_LocaleTools0 = new ToolBox.LocaleTools();
      assertNotNull(toolBox_LocaleTools0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean2 = ToolBox.ArrayTools.isEmpty(booleanArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertFalse(boolean2);
      
      boolean boolean3 = ToolBox.StringTools.equals((CharSequence) charBuffer1, (CharSequence) charBuffer0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'[', '|', 'x', 'p', 'q', 'U', 'J', 'I', 'c'}, charArray0);
      assertTrue(boolean3);
      assertEquals(9, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.remaining());
      assertEquals("[|xpqUJIc", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(9, charBuffer0.length());
      assertEquals(9, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(9, charBuffer1.limit());
      assertFalse(charBuffer1.isDirect());
      assertEquals(9, charBuffer1.remaining());
      assertEquals(9, charBuffer1.length());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.hasArray());
      assertEquals(9, charBuffer1.capacity());
      assertEquals("[|xpqUJIc", charBuffer1.toString());
      assertTrue(charBuffer1.hasRemaining());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = ToolBox.StringTools.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      boolean boolean0 = ToolBox.StringTools.contains("\r", 2097);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2097;
      intArray0[1] = 2097;
      intArray0[2] = 2097;
      boolean boolean1 = ToolBox.ArrayTools.isEmpty(intArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {2097, 2097, 2097}, intArray0);
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\r";
      stringArray0[1] = "\r";
      stringArray0[2] = "\r";
      stringArray0[3] = "\r";
      stringArray0[4] = "\r";
      String string1 = ToolBox.StringTools.getCommonPrefix(stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertNotNull(string1);
      assertEquals("\r", string1);
      
      boolean boolean2 = ToolBox.StringTools.isAllLowerCase("\r");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ']';
      charArray0[1] = ')';
      charArray0[2] = '_';
      boolean boolean3 = ToolBox.StringTools.containsAny((CharSequence) "\r", charArray0);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {']', ')', '_'}, charArray0);
      assertFalse(boolean3);
      
      int int0 = ToolBox.CharSequenceTools.indexOf("\r", "\r", 2097);
      assertEquals((-1), int0);
      
      boolean boolean4 = ToolBox.StringTools.containsNone("\r", charArray0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {']', ')', '_'}, charArray0);
      assertTrue(boolean4);
      
      boolean boolean5 = ToolBox.ArrayTools.isEmpty(charArray0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {']', ')', '_'}, charArray0);
      assertFalse(boolean5);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "\r");
      assertNotNull(charBuffer0);
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals("\r", charBuffer0.toString());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      
      boolean boolean6 = ToolBox.StringTools.equals((CharSequence) charBuffer0, (CharSequence) "\r");
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6);
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals("\r", charBuffer0.toString());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1439);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertEquals(1439, charBuffer0.limit());
      assertEquals(1439, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1439, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1439, charBuffer0.remaining());
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(charBuffer0).when(supplier0).get();
      CharSequence charSequence0 = ToolBox.StringTools.getIfEmpty((CharSequence) null, supplier0);
      assertNotNull(charSequence0);
      assertEquals(0, charBuffer0.position());
      assertEquals(1439, charBuffer0.limit());
      assertEquals(1439, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1439, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1439, charBuffer0.remaining());
      assertEquals(1439, charSequence0.length());
      
      int int0 = ToolBox.CharSequenceTools.lastIndexOf(charSequence0, charSequence0, 4131);
      assertEquals(0, int0);
      assertEquals(0, charBuffer0.position());
      assertEquals(1439, charBuffer0.limit());
      assertEquals(1439, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1439, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1439, charBuffer0.remaining());
      assertEquals(1439, charSequence0.length());
      
      String string0 = ToolBox.RegExTools.replaceFirst("?aX", "", "p");
      assertNotNull(string0);
      assertEquals("p?aX", string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '8';
      charArray0[1] = 'a';
      int int1 = ToolBox.StringTools.indexOfAny((CharSequence) null, charArray0);
      assertFalse(int1 == int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', 'a'}, charArray0);
      assertEquals((-1), int1);
      
      boolean boolean0 = ToolBox.StringTools.containsAny((CharSequence) "?aX", (CharSequence) "p?aX");
      assertTrue(boolean0);
      
      String string1 = ToolBox.StringTools.LF;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\n", string1);
      
      boolean boolean1 = ToolBox.StringTools.isAllLowerCase("\n");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ToolBox.StringTools.isCreatable("\n");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int2 = ToolBox.StringTools.indexOfAnyBut((CharSequence) "", charArray0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', 'a'}, charArray0);
      assertEquals((-1), int2);
      
      int int3 = ToolBox.StringTools.indexOfAny("?aX", charArray0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', 'a'}, charArray0);
      assertEquals(1, int3);
      
      boolean boolean3 = ToolBox.ArrayTools.isEmpty(charArray0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', 'a'}, charArray0);
      assertFalse(boolean3);
      
      boolean boolean4 = ToolBox.StringTools.equals((CharSequence) "", (CharSequence) "\n");
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'a';
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) '8';
      boolean boolean5 = ToolBox.ArrayTools.isEmpty(doubleArray0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {97.0, (-1.0), 56.0}, doubleArray0, 0.01);
      assertFalse(boolean5);
      
      Supplier<String> supplier1 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = ToolBox.StringTools.getIfEmpty("p", supplier1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("p", string2);
      
      ToolBox.StringTools toolBox_StringTools0 = new ToolBox.StringTools();
      assertNotNull(toolBox_StringTools0);
      assertEquals((-1), ToolBox.StringTools.INDEX_NOT_FOUND);
      
      short[] shortArray0 = new short[0];
      boolean boolean6 = ToolBox.ArrayTools.isEmpty(shortArray0);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean5);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean6);
      
      boolean boolean7 = ToolBox.StringTools.isCreatable("?aX");
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean3);
      assertFalse(boolean7 == boolean0);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean5);
      assertFalse(boolean7);
      
      String string3 = ToolBox.RegExTools.replaceAll("p?aX", "", "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("p?aX", string3);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("A.23;I@bl[bvqZ[", (-587));
      assertNotNull(pattern0);
      assertEquals((-523), pattern0.flags());
      
      String[] stringArray0 = pattern0.split((CharSequence) "A.23;I@bl[bvqZ[");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      assertEquals((-523), pattern0.flags());
      
      String string0 = ToolBox.RegExTools.replaceAll("W|skvHbTA0N_!", pattern0, "A.23;I@bl[bvqZ[");
      assertNotNull(string0);
      assertEquals("W|skvHbTA0N_!", string0);
      assertEquals((-523), pattern0.flags());
      
      char[] charArray0 = new char[5];
      String string1 = ToolBox.RegExTools.replaceFirst("A.23;I@bl[bvqZ[", pattern0, "W|skvHbTA0N_!");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("W|skvHbTA0N_!", string1);
      assertEquals((-523), pattern0.flags());
      
      Matcher matcher0 = pattern0.matcher("W|skvHbTA0N_!");
      assertNotNull(matcher0);
      assertEquals((-523), pattern0.flags());
      assertTrue(matcher0.hasAnchoringBounds());
      assertEquals(0, matcher0.groupCount());
      assertFalse(matcher0.hasTransparentBounds());
      
      charArray0[0] = 'l';
      charArray0[1] = ';';
      charArray0[2] = '=';
      charArray0[3] = 'f';
      charArray0[4] = 'G';
      int int0 = ToolBox.StringTools.indexOfAnyBut((CharSequence) "W|skvHbTA0N_!", charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'l', ';', '=', 'f', 'G'}, charArray0);
      assertEquals(0, int0);
      
      int int1 = ToolBox.StringTools.indexOfAny("W|skvHbTA0N_!", charArray0);
      assertFalse(int1 == int0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'l', ';', '=', 'f', 'G'}, charArray0);
      assertEquals((-1), int1);
      
      boolean boolean0 = ToolBox.StringTools.containsAny((CharSequence) "W|skvHbTA0N_!", (CharSequence) "W|skvHbTA0N_!");
      assertTrue(boolean0);
      
      boolean boolean1 = ToolBox.StringTools.isCreatable("A.23;I@bl[bvqZ[");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ToolBox.LocaleTools toolBox_LocaleTools0 = new ToolBox.LocaleTools();
      assertNotNull(toolBox_LocaleTools0);
      
      int int2 = ToolBox.StringTools.indexOfDifference(stringArray0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), int2);
      assertEquals((-523), pattern0.flags());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = ToolBox.StringTools.compareIgnoreCase("", "", false);
      assertEquals(0, int0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'i';
      charArray0[1] = '(';
      charArray0[2] = 'b';
      charArray0[3] = 'r';
      charArray0[4] = '[';
      charArray0[5] = '%';
      charArray0[6] = 'V';
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0, 0, 0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(7, charArray0.length);
      assertNotNull(charBuffer1);
      assertArrayEquals(new char[] {'i', '(', 'b', 'r', '[', '%', 'V'}, charArray0);
      assertEquals(7, charBuffer1.capacity());
      assertTrue(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.remaining());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(0, charBuffer1.length());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      assertEquals("", charBuffer1.toString());
      
      int int1 = ToolBox.StringTools.indexOfAnyBut((CharSequence) "", (CharSequence) charBuffer0);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      
      boolean boolean0 = ToolBox.CharSequenceTools.regionMatches("", false, 0, charBuffer0, 0, 1288);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertFalse(boolean0);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      
      int int2 = ToolBox.CharSequenceTools.indexOf("", "", (-755));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("A.23;I@bl[bvqZ[", (-587));
      assertNotNull(pattern0);
      assertEquals((-523), pattern0.flags());
      
      String[] stringArray0 = pattern0.split((CharSequence) "A.23;I@bl[bvqZ[");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      assertEquals((-523), pattern0.flags());
      
      String string0 = ToolBox.RegExTools.replaceAll("W|skvHbTA0N_!", pattern0, "A.23;I@bl[bvqZ[");
      assertNotNull(string0);
      assertEquals("W|skvHbTA0N_!", string0);
      assertEquals((-523), pattern0.flags());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'l';
      charArray0[1] = ';';
      charArray0[2] = '=';
      charArray0[3] = 'f';
      charArray0[4] = 'G';
      Pattern pattern1 = Pattern.compile("W|skvHbTA0N_!");
      assertFalse(pattern1.equals((Object)pattern0));
      assertNotNull(pattern1);
      assertNotSame(pattern1, pattern0);
      assertEquals("W|skvHbTA0N_!", pattern1.pattern());
      assertEquals(0, pattern1.flags());
      assertEquals("W|skvHbTA0N_!", pattern1.toString());
      
      int int0 = ToolBox.StringTools.indexOfAnyBut((CharSequence) "W|skvHbTA0N_!", charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'l', ';', '=', 'f', 'G'}, charArray0);
      assertEquals(0, int0);
      
      int int1 = ToolBox.StringTools.indexOfAny("W|skvHbTA0N_!", charArray0);
      assertFalse(int1 == int0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'l', ';', '=', 'f', 'G'}, charArray0);
      assertEquals((-1), int1);
      
      boolean boolean0 = ToolBox.StringTools.containsAny((CharSequence) "W|skvHbTA0N_!", (CharSequence) "W|skvHbTA0N_!");
      assertTrue(boolean0);
      
      boolean boolean1 = ToolBox.ArrayTools.isEmpty((Object[]) stringArray0);
      assertFalse(pattern0.equals((Object)pattern1));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean1);
      assertNotSame(pattern0, pattern1);
      assertEquals((-523), pattern0.flags());
      
      ToolBox.LocaleTools toolBox_LocaleTools0 = new ToolBox.LocaleTools();
      assertNotNull(toolBox_LocaleTools0);
      
      int int2 = ToolBox.StringTools.compare("W|skvHbTA0N_!", (String) null, false);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = ToolBox.ArrayTools.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      String string0 = ToolBox.RegExTools.replaceAll("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = ToolBox.CharSequenceTools.indexOf("", "", 97);
      assertEquals(0, int0);
      
      int int1 = ToolBox.StringTools.compare("B(+~6Y)k", "B(+~6Y)k", true);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean1 = ToolBox.ArrayTools.isEmpty((int[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int2 = ToolBox.CharSequenceTools.lastIndexOf("", "", 1025);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      boolean boolean2 = ToolBox.StringTools.isNumeric("");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int3 = ToolBox.StringTools.compare("<6>F", ".W80~RbY^B7CdDV:*L9", true);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(14, int3);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = 'g';
      charArray0[2] = '3';
      charArray0[3] = '&';
      charArray0[4] = 's';
      charArray0[5] = '$';
      charArray0[6] = '>';
      charArray0[7] = '1';
      charArray0[8] = 'p';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(9, charArray0.length);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'-', 'g', '3', '&', 's', '$', '>', '1', 'p'}, charArray0);
      assertEquals(0, charBuffer0.position());
      assertEquals(9, charBuffer0.length());
      assertEquals(9, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(9, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("-g3&s$>1p", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      
      boolean boolean3 = ToolBox.CharSequenceTools.regionMatches(charBuffer0, true, 0, "B(+~6Y)k", 1, (-1570));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'-', 'g', '3', '&', 's', '$', '>', '1', 'p'}, charArray0);
      assertFalse(boolean3);
      assertEquals(0, charBuffer0.position());
      assertEquals(9, charBuffer0.length());
      assertEquals(9, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(9, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("-g3&s$>1p", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = ToolBox.StringTools.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      CharSequence charSequence0 = ToolBox.StringTools.getIfEmpty((CharSequence) " ", (Supplier<CharSequence>) null);
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals(" ", charSequence0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) " ");
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.capacity());
      
      boolean boolean0 = ToolBox.StringTools.isEmpty(charBuffer0);
      assertFalse(boolean0);
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.capacity());
      
      CharBuffer charBuffer1 = CharBuffer.allocate(1);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(1, charBuffer1.remaining());
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(1, charBuffer1.length());
      assertEquals(1, charBuffer1.capacity());
      assertEquals(1, charBuffer1.limit());
      assertEquals("\u0000", charBuffer1.toString());
      
      int int0 = ToolBox.CharSequenceTools.indexOf(charBuffer0, " ", 13);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertEquals((-1), int0);
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.capacity());
      
      char[] charArray0 = ToolBox.CharSequenceTools.toCharArray(charBuffer1);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(1, charBuffer1.remaining());
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(1, charBuffer1.length());
      assertEquals(1, charBuffer1.capacity());
      assertEquals(1, charBuffer1.limit());
      assertEquals("\u0000", charBuffer1.toString());
      
      boolean boolean1 = ToolBox.StringTools.isCreatable("Zp,4j*+u0MVC");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ToolBox.ArrayTools.isEmpty(charArray0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(boolean2);
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(1, charBuffer1.remaining());
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(1, charBuffer1.length());
      assertEquals(1, charBuffer1.capacity());
      assertEquals(1, charBuffer1.limit());
      assertEquals("\u0000", charBuffer1.toString());
      
      int int1 = ToolBox.StringTools.indexOfAnyBut((CharSequence) " ", (CharSequence) " ");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = ToolBox.CharSequenceTools.lastIndexOf(charBuffer0, " ", 1);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.capacity());
      
      boolean boolean3 = ToolBox.CharSequenceTools.regionMatches("Zp,4j*+u0MVC", false, (-1), charBuffer0, (-2706), (-1));
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.capacity());
      
      int int3 = ToolBox.CharSequenceTools.lastIndexOf(" ", charBuffer0, 71);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(0, int3);
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.capacity());
      
      int int4 = ToolBox.StringTools.indexOfAny(charBuffer0, charArray0);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals((-1), int4);
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(1, charBuffer1.remaining());
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(1, charBuffer1.length());
      assertEquals(1, charBuffer1.capacity());
      assertEquals(1, charBuffer1.limit());
      assertEquals("\u0000", charBuffer1.toString());
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)1093;
      shortArray0[2] = (short)13;
      shortArray0[2] = (short)55;
      shortArray0[4] = (short)3;
      boolean boolean4 = ToolBox.ArrayTools.isEmpty(shortArray0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)1093, (short)55, (short)0, (short)3}, shortArray0);
      assertFalse(boolean4);
      
      boolean boolean5 = ToolBox.CharSequenceTools.regionMatches(charBuffer1, false, 7, "Zp,4j*+u0MVC", 1, (-1));
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5);
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(1, charBuffer1.remaining());
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(1, charBuffer1.length());
      assertEquals(1, charBuffer1.capacity());
      assertEquals(1, charBuffer1.limit());
      assertEquals("\u0000", charBuffer1.toString());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ToolBox.LocaleTools toolBox_LocaleTools0 = new ToolBox.LocaleTools();
      assertNotNull(toolBox_LocaleTools0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ToolBox.CharSequenceTools.TO_STRING_LIMIT;
      assertEquals(16, int0);
      
      boolean boolean0 = ToolBox.StringTools.isCreatable("c0mp5111.assignmunt.cut.ToolBox");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = ToolBox.StringTools.compare("_", "_", true);
      assertEquals(0, int0);
      
      String string0 = ToolBox.StringTools.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      boolean boolean0 = ToolBox.CharSequenceTools.regionMatches("_", true, 0, "\n", 0, 95);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[0];
      boolean boolean1 = ToolBox.ArrayTools.isEmpty(shortArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean boolean2 = ToolBox.ArrayTools.isEmpty(booleanArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true}, booleanArray0));
      assertFalse(boolean2);
      
      int int1 = ToolBox.CharSequenceTools.indexOf("_", "_", 95);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean3 = ToolBox.StringTools.isNumeric("\n");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      boolean boolean4 = ToolBox.StringTools.isNumeric("_");
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'B';
      charArray0[1] = 'b';
      charArray0[2] = 'w';
      charArray0[3] = 'O';
      charArray0[4] = '3';
      charArray0[5] = '-';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'B', 'b', 'w', 'O', '3', '-'}, charArray0);
      assertEquals("BbwO3-", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(6, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(6, charBuffer0.length());
      assertEquals(6, charBuffer0.remaining());
      assertEquals(6, charBuffer0.limit());
      
      int int2 = ToolBox.StringTools.indexOfAnyBut((CharSequence) "\n", (CharSequence) charBuffer0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'B', 'b', 'w', 'O', '3', '-'}, charArray0);
      assertEquals(0, int2);
      assertEquals("BbwO3-", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(6, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(6, charBuffer0.length());
      assertEquals(6, charBuffer0.remaining());
      assertEquals(6, charBuffer0.limit());
      
      boolean boolean5 = ToolBox.StringTools.contains("\n", (-300));
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '-';
      boolean boolean6 = ToolBox.ArrayTools.isEmpty(doubleArray0);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean5);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {45.0}, doubleArray0, 0.01);
      assertFalse(boolean6);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      int int0 = ToolBox.StringTools.indexOfDifference(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      ToolBox.CharTools toolBox_CharTools0 = new ToolBox.CharTools();
      assertNotNull(toolBox_CharTools0);
      assertEquals('\r', ToolBox.CharTools.CR);
      assertEquals('\n', ToolBox.CharTools.LF);
      assertEquals('\u0000', ToolBox.CharTools.NUL);
      
      int int1 = ToolBox.StringTools.compare("", "", false);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '\r';
      charArray0[1] = '\u0000';
      charArray0[2] = '\n';
      charArray0[3] = '\u0000';
      charArray0[4] = '\r';
      boolean boolean0 = ToolBox.StringTools.containsAny((CharSequence) "", charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\r', '\u0000', '\n', '\u0000', '\r'}, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ToolBox.CharSequenceTools toolBox_CharSequenceTools0 = new ToolBox.CharSequenceTools();
      assertNotNull(toolBox_CharSequenceTools0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      int int0 = ToolBox.StringTools.indexOfDifference(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = ToolBox.ArrayTools.isEmpty((Object[]) charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object2));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object5));
      assertNotNull(object6);
      
      objectArray0[6] = object6;
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(objectArray0);
      assertEquals(7, objectArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "L";
      String string0 = ToolBox.StringTools.getCommonPrefix(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      assertEquals("L", string0);
      
      String string1 = ToolBox.StringTools.getCommonPrefix(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string1);
      assertEquals("L", string1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      boolean boolean1 = ToolBox.ArrayTools.isEmpty(byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3}, byteArray0);
      assertFalse(boolean1);
      
      int int0 = ToolBox.StringTools.compare("L", "L", false);
      assertEquals(0, int0);
      
      boolean boolean2 = ToolBox.StringTools.isAllUpperCase("L");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = 'h';
      charArray0[2] = '\'';
      charArray0[3] = '^';
      charArray0[4] = '#';
      charArray0[5] = 'X';
      charArray0[6] = '@';
      charArray0[7] = 'o';
      charArray0[8] = '3';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-953), (int) (byte)3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = ToolBox.StringTools.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      ToolBox.CharSequenceTools toolBox_CharSequenceTools0 = new ToolBox.CharSequenceTools();
      assertNotNull(toolBox_CharSequenceTools0);
      
      boolean boolean1 = ToolBox.StringTools.isCreatable("T$");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = ToolBox.StringTools.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      int int0 = ToolBox.StringTools.indexOfAnyBut((CharSequence) "\n", charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'7'}, charArray0);
      assertEquals(0, int0);
      
      int int1 = ToolBox.StringTools.indexOfAny("T$", charArray0);
      assertFalse(int1 == int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'7'}, charArray0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'O';
      charArray0[1] = 'f';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(2, charArray0.length);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'O', 'f'}, charArray0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("Of", charBuffer0.toString());
      assertEquals(2, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.limit());
      
      String string0 = ToolBox.StringTools.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      CharBuffer charBuffer1 = CharBuffer.allocate('f');
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertTrue(charBuffer1.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertTrue(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      assertEquals(102, charBuffer1.remaining());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(102, charBuffer1.limit());
      assertEquals(102, charBuffer1.length());
      assertEquals(102, charBuffer1.capacity());
      assertEquals(0, charBuffer1.arrayOffset());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\n";
      stringArray0[1] = "\n";
      stringArray0[2] = "\n";
      String string1 = ToolBox.StringTools.getCommonPrefix(stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(3, stringArray0.length);
      assertNotNull(string1);
      assertEquals("\n", string1);
      
      int int0 = ToolBox.CharSequenceTools.lastIndexOf("\n", charBuffer1, 1261);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertEquals((-1), int0);
      assertNotSame(charBuffer1, charBuffer0);
      assertTrue(charBuffer1.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertTrue(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      assertEquals(102, charBuffer1.remaining());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(102, charBuffer1.limit());
      assertEquals(102, charBuffer1.length());
      assertEquals(102, charBuffer1.capacity());
      assertEquals(0, charBuffer1.arrayOffset());
      
      boolean boolean0 = ToolBox.StringTools.containsAny((CharSequence) charBuffer0, charArray0);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'O', 'f'}, charArray0);
      assertTrue(boolean0);
      assertNotSame(charBuffer0, charBuffer1);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("Of", charBuffer0.toString());
      assertEquals(2, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.limit());
      
      boolean boolean1 = ToolBox.CharSequenceTools.regionMatches(charBuffer0, true, (-381), charBuffer0, (-381), 72);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(boolean1 == boolean0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'O', 'f'}, charArray0);
      assertFalse(boolean1);
      assertNotSame(charBuffer0, charBuffer1);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("Of", charBuffer0.toString());
      assertEquals(2, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.limit());
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 72;
      floatArray0[1] = (float) 'O';
      floatArray0[2] = (float) 'O';
      floatArray0[3] = (float) 'O';
      floatArray0[4] = (float) 'O';
      floatArray0[5] = (float) 'O';
      floatArray0[6] = (float) (-381);
      floatArray0[7] = 0.0F;
      boolean boolean2 = ToolBox.ArrayTools.isEmpty(floatArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {72.0F, 79.0F, 79.0F, 79.0F, 79.0F, 79.0F, (-381.0F), 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean2);
      
      boolean boolean3 = ToolBox.CharSequenceTools.regionMatches("\n", false, 72, "\n", (-381), 0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = ToolBox.ArrayTools.isEmpty((boolean[]) null);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4);
      
      int int1 = ToolBox.StringTools.compare("LLC+K2J>!eg", ",[hr7-N.MBd-MmR", false);
      assertFalse(int1 == int0);
      assertEquals(32, int1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((CharSequence) null).when(supplier0).get();
      CharSequence charSequence0 = ToolBox.StringTools.getIfEmpty((CharSequence) null, supplier0);
      assertNull(charSequence0);
      
      int int0 = ToolBox.CharSequenceTools.lastIndexOf((CharSequence) null, (CharSequence) null, 4131);
      assertEquals((-1), int0);
      
      String string0 = ToolBox.RegExTools.replaceFirst("?aX", "", "p");
      assertNotNull(string0);
      assertEquals("p?aX", string0);
      
      char[] charArray0 = new char[11];
      charArray0[0] = '8';
      charArray0[1] = 'a';
      int int1 = ToolBox.StringTools.indexOfAny((CharSequence) null, charArray0);
      assertTrue(int1 == int0);
      assertEquals(11, charArray0.length);
      assertEquals((-1), int1);
      
      boolean boolean0 = ToolBox.StringTools.containsAny((CharSequence) "?aX", (CharSequence) "p?aX");
      assertTrue(boolean0);
      
      String string1 = ToolBox.StringTools.LF;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\n", string1);
      
      boolean boolean1 = ToolBox.StringTools.isAllLowerCase("\n");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ToolBox.StringTools.isCreatable("\n");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int2 = ToolBox.ArrayTools.INDEX_NOT_FOUND;
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      int int3 = ToolBox.StringTools.indexOfAny("?aX", charArray0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(11, charArray0.length);
      assertEquals((-1), int3);
      
      boolean boolean3 = ToolBox.ArrayTools.isEmpty(charArray0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertEquals(11, charArray0.length);
      assertFalse(boolean3);
      
      boolean boolean4 = ToolBox.StringTools.equals((CharSequence) "", (CharSequence) "\n");
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'a';
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) '8';
      boolean boolean5 = ToolBox.ArrayTools.isEmpty(doubleArray0);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {97.0, (-1.0), 56.0}, doubleArray0, 0.01);
      assertFalse(boolean5);
      
      Supplier<String> supplier1 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = ToolBox.StringTools.getIfEmpty("p", supplier1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("p", string2);
      
      ToolBox.StringTools toolBox_StringTools0 = new ToolBox.StringTools();
      assertNotNull(toolBox_StringTools0);
      assertEquals((-1), ToolBox.StringTools.INDEX_NOT_FOUND);
      
      short[] shortArray0 = new short[0];
      boolean boolean6 = ToolBox.ArrayTools.isEmpty(shortArray0);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean1);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean6);
      
      boolean boolean7 = ToolBox.StringTools.isCreatable("?aX");
      assertFalse(boolean7 == boolean6);
      assertFalse(boolean7 == boolean0);
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean5);
      assertFalse(boolean7);
      
      String string3 = ToolBox.RegExTools.replaceAll("p?aX", "", "");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("p?aX", string3);
      
      // Undeclared exception!
      try { 
        ToolBox.LocaleTools.toLocale("\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 
         //
         verifyException("comp5111.assignment.cut.ToolBox$LocaleTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = ToolBox.RegExTools.replacePattern("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = ToolBox.StringTools.isNumeric("");
      assertFalse(boolean0);
      
      int int0 = ToolBox.CharSequenceTools.indexOf("", "", 103);
      assertEquals(0, int0);
      
      int int1 = ToolBox.CharSequenceTools.indexOf("", "", 103);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean1 = ToolBox.StringTools.equals((CharSequence) "", (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ToolBox.StringTools.isMixedCase("");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      
      char[] charArray0 = new char[0];
      int int2 = ToolBox.StringTools.indexOfAnyBut((CharSequence) charBuffer0, charArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int2);
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)36;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)47;
      shortArray0[3] = (short)32;
      boolean boolean3 = ToolBox.ArrayTools.isEmpty(shortArray0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)36, (short)1, (short)47, (short)32}, shortArray0);
      assertFalse(boolean3);
      
      int int3 = ToolBox.CharSequenceTools.indexOf("", "", 13);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      
      int int4 = ToolBox.StringTools.compare("", "", false);
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      assertEquals(0, int4);
      
      String string1 = ToolBox.StringTools.EMPTY;
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean4 = ToolBox.CharSequenceTools.regionMatches("", true, (-1), "", 97, (short)1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)32;
      intArray0[1] = 13;
      intArray0[2] = 13;
      intArray0[3] = 0;
      intArray0[4] = (-4100);
      intArray0[5] = (int) (short)32;
      intArray0[6] = 103;
      boolean boolean5 = ToolBox.ArrayTools.isEmpty(intArray0);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {32, 13, 13, 0, (-4100), 32, 103}, intArray0);
      assertFalse(boolean5);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = ToolBox.StringTools.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = ToolBox.ArrayTools.isEmpty(byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean1);
      
      String string0 = ToolBox.RegExTools.replaceFirst("", (String) null, (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = ToolBox.StringTools.compareIgnoreCase("", (String) null, false);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = null;
      charSequenceArray0[3] = null;
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = null;
      int int1 = ToolBox.StringTools.indexOfDifference(charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(0, int1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      boolean boolean2 = ToolBox.ArrayTools.isEmpty(longArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("m");
      assertNotNull(pattern0);
      assertEquals("m", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("m", pattern0.pattern());
      
      String string0 = ToolBox.RegExTools.replaceFirst("m", pattern0, "");
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("m", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("m", pattern0.pattern());
      
      String[] stringArray0 = pattern0.split((CharSequence) "", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      assertEquals("m", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("m", pattern0.pattern());
      
      Stream<String> stream0 = pattern0.splitAsStream("");
      assertNotNull(stream0);
      assertEquals("m", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("m", pattern0.pattern());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "", 0, 0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("m").when(supplier0).get();
      CharSequence charSequence0 = ToolBox.StringTools.getIfEmpty((CharSequence) "", supplier0);
      assertFalse(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals("m", charSequence0);
      
      int int0 = ToolBox.CharSequenceTools.lastIndexOf(charBuffer0, "m", 0);
      assertEquals((-1), int0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
      
      // Undeclared exception!
      try { 
        ToolBox.LocaleTools.toLocale("m");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: m
         //
         verifyException("comp5111.assignment.cut.ToolBox$LocaleTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(0, charArray0.length);
      assertNotNull(charBuffer1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer1.length());
      assertEquals("", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.hasArray());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.capacity());
      
      ByteOrder byteOrder0 = charBuffer1.order();
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(0, charArray0.length);
      assertNotNull(byteOrder0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer1.length());
      assertEquals("", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.hasArray());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.capacity());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      int int0 = charBuffer0.read(charBuffer1);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer1.length());
      assertEquals("", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.hasArray());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.capacity());
      
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'm';
      charArray1[1] = 'x';
      charArray1[3] = '^';
      charArray1[3] = '4';
      CharBuffer charBuffer2 = CharBuffer.wrap(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charBuffer2.equals((Object)charBuffer0));
      assertFalse(charBuffer2.equals((Object)charBuffer1));
      assertEquals(4, charArray1.length);
      assertNotNull(charBuffer2);
      assertArrayEquals(new char[] {'m', 'x', '\u0000', '4'}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charBuffer2, charBuffer0);
      assertEquals(4, charBuffer2.length());
      assertEquals(4, charBuffer2.limit());
      assertEquals(0, charBuffer2.arrayOffset());
      assertEquals(4, charBuffer2.capacity());
      assertTrue(charBuffer2.hasRemaining());
      assertFalse(charBuffer2.isDirect());
      assertTrue(charBuffer2.hasArray());
      assertEquals("mx\u00004", charBuffer2.toString());
      assertEquals(0, charBuffer2.position());
      assertEquals(4, charBuffer2.remaining());
      assertFalse(charBuffer2.isReadOnly());
      
      int int1 = charBuffer0.read(charBuffer2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertFalse(charBuffer0.equals((Object)charBuffer2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charBuffer2.equals((Object)charBuffer0));
      assertFalse(charBuffer2.equals((Object)charBuffer1));
      assertTrue(int1 == int0);
      assertEquals(0, charArray0.length);
      assertEquals(4, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'m', 'x', '\u0000', '4'}, charArray1);
      assertEquals((-1), int1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charBuffer0, charBuffer2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charBuffer2, charBuffer0);
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(4, charBuffer2.length());
      assertEquals(4, charBuffer2.limit());
      assertEquals(0, charBuffer2.arrayOffset());
      assertEquals(4, charBuffer2.capacity());
      assertTrue(charBuffer2.hasRemaining());
      assertFalse(charBuffer2.isDirect());
      assertTrue(charBuffer2.hasArray());
      assertEquals("mx\u00004", charBuffer2.toString());
      assertEquals(0, charBuffer2.position());
      assertEquals(4, charBuffer2.remaining());
      assertFalse(charBuffer2.isReadOnly());
      
      boolean boolean0 = ToolBox.StringTools.contains(charBuffer0, 956);
      assertFalse(charArray0.equals((Object)charArray1));
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertFalse(charBuffer0.equals((Object)charBuffer2));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charBuffer0, charBuffer2);
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      
      CharBuffer charBuffer3 = charBuffer0.compact();
      assertFalse(charArray0.equals((Object)charArray1));
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertFalse(charBuffer0.equals((Object)charBuffer2));
      assertFalse(charBuffer3.equals((Object)charBuffer2));
      assertTrue(charBuffer3.equals((Object)charBuffer1));
      assertEquals(0, charArray0.length);
      assertNotNull(charBuffer3);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charBuffer0, charBuffer2);
      assertSame(charBuffer0, charBuffer3);
      assertSame(charBuffer3, charBuffer0);
      assertNotSame(charBuffer3, charBuffer2);
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer3.hasArray());
      assertEquals("", charBuffer3.toString());
      assertEquals(0, charBuffer3.length());
      assertEquals(0, charBuffer3.limit());
      assertFalse(charBuffer3.hasRemaining());
      assertEquals(0, charBuffer3.position());
      assertFalse(charBuffer3.isDirect());
      assertEquals(0, charBuffer3.remaining());
      assertEquals(0, charBuffer3.capacity());
      assertFalse(charBuffer3.isReadOnly());
      assertEquals(0, charBuffer3.arrayOffset());
      
      int int2 = ToolBox.CharSequenceTools.lastIndexOf(charBuffer0, charBuffer0, 956);
      assertFalse(charArray0.equals((Object)charArray1));
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertFalse(charBuffer0.equals((Object)charBuffer2));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, int2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charBuffer0, charBuffer2);
      assertSame(charBuffer0, charBuffer3);
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      
      boolean boolean1 = ToolBox.StringTools.isAllUpperCase(charBuffer0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertFalse(charBuffer0.equals((Object)charBuffer2));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charBuffer0, charBuffer2);
      assertSame(charBuffer0, charBuffer3);
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      
      String string0 = null;
      // Undeclared exception!
      try { 
        Pattern.compile((String) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      assertEquals(0, charArray0.length);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      
      CharBuffer charBuffer1 = charBuffer0.append((CharSequence) null, 0, 0);
      assertEquals(0, charArray0.length);
      assertNotNull(charBuffer1);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer1.hasArray());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(0, charBuffer1.position());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertEquals("", charBuffer1.toString());
      
      boolean boolean0 = ToolBox.CharSequenceTools.regionMatches(charBuffer0, false, 0, charBuffer0, 0, 0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      assertSame(charBuffer0, charBuffer1);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      boolean boolean1 = ToolBox.ArrayTools.isEmpty(intArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean1);
      
      ToolBox.ArrayTools toolBox_ArrayTools0 = new ToolBox.ArrayTools();
      assertNotNull(toolBox_ArrayTools0);
      assertEquals((-1), ToolBox.ArrayTools.INDEX_NOT_FOUND);
      
      Buffer buffer0 = charBuffer0.clear();
      assertEquals(0, charArray0.length);
      assertNotNull(buffer0);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(charBuffer0, charBuffer1);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(buffer0.isReadOnly());
      assertEquals(0, buffer0.arrayOffset());
      assertEquals(0, buffer0.remaining());
      assertEquals(0, buffer0.position());
      assertTrue(buffer0.hasArray());
      assertFalse(buffer0.isDirect());
      assertFalse(buffer0.hasRemaining());
      assertEquals(0, buffer0.limit());
      assertEquals(0, buffer0.capacity());
      
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '@';
      charArray1[1] = 'B';
      charArray1[2] = 'J';
      charArray1[3] = 'C';
      IntStream intStream0 = charBuffer1.chars();
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(0, charArray0.length);
      assertNotNull(intStream0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(charArray0, charArray1);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer1.hasArray());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(0, charBuffer1.position());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertEquals("", charBuffer1.toString());
      
      charArray1[4] = 'O';
      int int0 = ToolBox.StringTools.indexOfAny(charBuffer1, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(5, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'@', 'B', 'J', 'C', 'O'}, charArray1);
      assertEquals((-1), int0);
      assertNotSame(charArray0, charArray1);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertNotSame(charArray1, charArray0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer1.hasArray());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(0, charBuffer1.position());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertEquals("", charBuffer1.toString());
      
      int int1 = ToolBox.CharSequenceTools.lastIndexOf(charBuffer0, 0, 0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertTrue(int1 == int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int1);
      assertNotSame(charArray0, charArray1);
      assertSame(charBuffer0, charBuffer1);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 'C';
      longArray0[3] = (long) 'J';
      longArray0[4] = (long) 'B';
      boolean boolean2 = ToolBox.ArrayTools.isEmpty(longArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 0L, 67L, 74L, 66L}, longArray0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "#eE";
      // Undeclared exception!
      try { 
        ToolBox.LocaleTools.toLocale("#eE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: #eE
         //
         verifyException("comp5111.assignment.cut.ToolBox$LocaleTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = ToolBox.StringTools.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      charArray0[1] = '\"';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(2, charArray0.length);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'3', '\"'}, charArray0);
      assertEquals(0, charBuffer0.position());
      assertEquals(2, charBuffer0.length());
      assertEquals(2, charBuffer0.limit());
      assertEquals("3\"", charBuffer0.toString());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      
      boolean boolean0 = ToolBox.CharSequenceTools.regionMatches("\n", false, 0, charBuffer0, 0, 0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'3', '\"'}, charArray0);
      assertTrue(boolean0);
      assertEquals(0, charBuffer0.position());
      assertEquals(2, charBuffer0.length());
      assertEquals(2, charBuffer0.limit());
      assertEquals("3\"", charBuffer0.toString());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      
      ToolBox.CharTools toolBox_CharTools0 = new ToolBox.CharTools();
      assertNotNull(toolBox_CharTools0);
      assertEquals('\n', ToolBox.CharTools.LF);
      assertEquals('\r', ToolBox.CharTools.CR);
      assertEquals('\u0000', ToolBox.CharTools.NUL);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-3819);
      shortArray0[3] = (short)2880;
      boolean boolean1 = ToolBox.ArrayTools.isEmpty(shortArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short)0, (short) (-3819), (short)2880}, shortArray0);
      assertFalse(boolean1);
      
      boolean boolean2 = ToolBox.ArrayTools.isEmpty(charArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'3', '\"'}, charArray0);
      assertFalse(boolean2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[1] = (CharSequence) "\n";
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charSequenceArray0[1], (int) (short)1, 841);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "L";
      String string1 = ToolBox.RegExTools.replaceAll("L", "L", "L");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("L", string1);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "L");
      assertNotNull(charBuffer0);
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("L", charBuffer0.toString());
      assertEquals(1, charBuffer0.capacity());
      
      boolean boolean0 = ToolBox.StringTools.equals((CharSequence) "L", (CharSequence) charBuffer0);
      assertTrue(boolean0);
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("L", charBuffer0.toString());
      assertEquals(1, charBuffer0.capacity());
      
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        charBuffer0.reset();
        fail("Expecting exception: InvalidMarkException");
      
      } catch(InvalidMarkException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Locale locale0 = ToolBox.LocaleTools.toLocale("hwi");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("hwi", locale0.getLanguage());
      assertEquals("hwi", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("hwi", locale0.toString());
      
      boolean boolean0 = ToolBox.StringTools.equals((CharSequence) "hwi", (CharSequence) "hwi");
      assertTrue(boolean0);
      
      int int0 = ToolBox.StringTools.indexOfAny("hwi", (char[]) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = ToolBox.StringTools.isAllUpperCase("hwi");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = ToolBox.StringTools.getIfEmpty("hwi", supplier0);
      assertNotNull(string0);
      assertEquals("hwi", string0);
      
      String string1 = ToolBox.RegExTools.replaceFirst("hwi", "hwi", "hwi");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("hwi", string1);
      
      boolean boolean2 = ToolBox.StringTools.containsAny((CharSequence) "hwi", (char[]) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int1 = ToolBox.StringTools.indexOfAny("hwi", (char[]) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean3 = ToolBox.StringTools.isMixedCase("hwi");
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      boolean boolean4 = ToolBox.StringTools.containsNone("hwi", (char[]) null);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4);
      
      ToolBox.StringTools toolBox_StringTools0 = new ToolBox.StringTools();
      assertNotNull(toolBox_StringTools0);
      assertEquals((-1), ToolBox.StringTools.INDEX_NOT_FOUND);
      
      String string2 = "z(_|BB%+X";
      // Undeclared exception!
      try { 
        ToolBox.RegExTools.replacePattern("gGsf", "z(_|BB%+X", " ");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 9\r
         // z(_|BB%+X
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Locale locale0 = ToolBox.LocaleTools.toLocale("hwi");
      assertNotNull(locale0);
      assertEquals("hwi", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("hwi", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("hwi", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      boolean boolean0 = ToolBox.StringTools.equals((CharSequence) "hwi", (CharSequence) "hwi");
      assertTrue(boolean0);
      
      int int0 = ToolBox.StringTools.indexOfAny("hwi", (char[]) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = ToolBox.StringTools.isAllUpperCase("hwi");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = ToolBox.StringTools.getIfEmpty("hwi", supplier0);
      assertNotNull(string0);
      assertEquals("hwi", string0);
      
      String string1 = ToolBox.RegExTools.replaceFirst("hwi", "hwi", "hwi");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("hwi", string1);
      
      boolean boolean2 = ToolBox.StringTools.containsAny((CharSequence) "hwi", (char[]) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = ToolBox.StringTools.containsNone("hwi", (char[]) null);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      ToolBox.StringTools toolBox_StringTools0 = new ToolBox.StringTools();
      assertNotNull(toolBox_StringTools0);
      assertEquals((-1), ToolBox.StringTools.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      try { 
        ToolBox.RegExTools.replacePattern("gGsf", "z(_|BB%+X", " ");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 9\r
         // z(_|BB%+X
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = ToolBox.StringTools.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      int int0 = ToolBox.CharSequenceTools.indexOf(" ", 0, 1648);
      assertEquals((-1), int0);
      
      boolean boolean0 = false;
      int int1 = 0;
      Pattern pattern0 = Pattern.compile(" ", 0);
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals(" ", pattern0.pattern());
      assertEquals(" ", pattern0.toString());
      
      String string1 = null;
      String string2 = ToolBox.RegExTools.replaceFirst(" ", pattern0, (String) null);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(" ", string2);
      assertEquals(0, pattern0.flags());
      assertEquals(" ", pattern0.pattern());
      assertEquals(" ", pattern0.toString());
      
      int int2 = (-1);
      String string3 = "G];p%Fv#7*h{}VG`y";
      // Undeclared exception!
      try { 
        Pattern.matches("G];p%Fv#7*h{}VG`y", " ");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 10\r
         // G];p%Fv#7*h{}VG`y\r
         //           ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ToolBox.RegExTools toolBox_RegExTools0 = new ToolBox.RegExTools();
      assertNotNull(toolBox_RegExTools0);
      
      ToolBox toolBox0 = new ToolBox();
      assertNotNull(toolBox0);
      
      Pattern pattern0 = Pattern.compile("C1$~F_+vp$K+kC2D");
      assertNotNull(pattern0);
      assertEquals("C1$~F_+vp$K+kC2D", pattern0.pattern());
      assertEquals("C1$~F_+vp$K+kC2D", pattern0.toString());
      assertEquals(0, pattern0.flags());
      
      String string0 = ToolBox.RegExTools.replaceFirst("C1$~F_+vp$K+kC2D", pattern0, (String) null);
      assertNotNull(string0);
      assertEquals("C1$~F_+vp$K+kC2D", string0);
      assertEquals("C1$~F_+vp$K+kC2D", pattern0.pattern());
      assertEquals("C1$~F_+vp$K+kC2D", pattern0.toString());
      assertEquals(0, pattern0.flags());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = ToolBox.StringTools.isCreatable("6Ag,u<R?kDK]_*HT");
      assertFalse(boolean0);
      
      Locale locale0 = ToolBox.LocaleTools.toLocale((String) null);
      assertNull(locale0);
      
      ToolBox.LocaleTools toolBox_LocaleTools0 = new ToolBox.LocaleTools();
      assertNotNull(toolBox_LocaleTools0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'Y';
      charArray0[1] = 'Z';
      charArray0[2] = 's';
      int int0 = ToolBox.StringTools.indexOfAnyBut((CharSequence) "6Ag,u<R?kDK]_*HT", charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'Y', 'Z', 's'}, charArray0);
      assertEquals(0, int0);
      
      boolean boolean1 = ToolBox.StringTools.contains((CharSequence) null, 1254);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = ToolBox.RegExTools.replaceAll((String) null, (String) null, "uNcIk0TOdO6NK,bA|@L");
      assertNull(string0);
      
      boolean boolean2 = ToolBox.StringTools.isAllLowerCase((CharSequence) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 's';
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 1254;
      longArray0[3] = 1994L;
      longArray0[4] = (long) 's';
      longArray0[5] = (long) 'Y';
      longArray0[6] = (long) 'Y';
      longArray0[7] = (long) 1254;
      longArray0[8] = (long) 'Z';
      boolean boolean3 = ToolBox.ArrayTools.isEmpty(longArray0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {115L, 0L, 1254L, 1994L, 115L, 89L, 89L, 1254L, 90L}, longArray0);
      assertFalse(boolean3);
      
      int int1 = ToolBox.CharSequenceTools.lastIndexOf((CharSequence) null, "6Ag,u<R?kDK]_*HT", 1254);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = ToolBox.StringTools.EMPTY;
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean4 = ToolBox.StringTools.containsAny((CharSequence) "", (CharSequence) null);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = ToolBox.StringTools.isCreatable("6Ag,u<R?kDK]_*HT");
      assertFalse(boolean0);
      
      Locale locale0 = ToolBox.LocaleTools.toLocale((String) null);
      assertNull(locale0);
      
      ToolBox.LocaleTools toolBox_LocaleTools0 = new ToolBox.LocaleTools();
      assertNotNull(toolBox_LocaleTools0);
      
      boolean boolean1 = ToolBox.StringTools.contains((CharSequence) null, 1254);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = ToolBox.RegExTools.replaceAll((String) null, (String) null, "uNcIk0TOdO6NK,bA|@L");
      assertNull(string0);
      
      long[] longArray0 = new long[9];
      longArray0[2] = (long) 1254;
      longArray0[3] = 1994L;
      longArray0[4] = (long) 's';
      longArray0[7] = (long) 1254;
      boolean boolean2 = ToolBox.ArrayTools.isEmpty(longArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 1254L, 1994L, 115L, 0L, 0L, 1254L, 0L}, longArray0);
      assertFalse(boolean2);
      
      int int0 = ToolBox.CharSequenceTools.lastIndexOf((CharSequence) null, "6Ag,u<R?kDK]_*HT", 1254);
      assertEquals((-1), int0);
      
      String string1 = ToolBox.StringTools.EMPTY;
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean3 = ToolBox.StringTools.containsAny((CharSequence) "", (CharSequence) null);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ToolBox.RegExTools toolBox_RegExTools0 = new ToolBox.RegExTools();
      assertNotNull(toolBox_RegExTools0);
      
      String string0 = "";
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string1 = ToolBox.StringTools.getIfEmpty("", supplier0);
      assertNull(string1);
      
      boolean boolean0 = ToolBox.StringTools.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = "wy";
      String string3 = ToolBox.RegExTools.replaceAll("", "", "wy");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("wy", string3);
      
      int int0 = ToolBox.StringTools.length("wy");
      assertEquals(2, int0);
      
      Locale locale0 = ToolBox.LocaleTools.toLocale("wy");
      assertNotNull(locale0);
      assertEquals("wy", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("wy", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      int int1 = ToolBox.StringTools.indexOfDifference(charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        ToolBox.CharSequenceTools.indexOf("wy", charSequenceArray0[0], (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("comp5111.assignment.cut.ToolBox$CharSequenceTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = ToolBox.StringTools.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      int int0 = ToolBox.CharSequenceTools.indexOf(" ", 3336, 3336);
      assertEquals((-1), int0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) " ", 0, 0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      
      Buffer buffer0 = charBuffer0.mark();
      assertNotNull(buffer0);
      assertEquals(0, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(buffer0.hasArray());
      assertEquals(0, buffer0.remaining());
      assertEquals(1, buffer0.capacity());
      assertTrue(buffer0.isReadOnly());
      assertEquals(0, buffer0.position());
      assertEquals(0, buffer0.limit());
      assertFalse(buffer0.isDirect());
      assertFalse(buffer0.hasRemaining());
      
      int int1 = ToolBox.CharSequenceTools.indexOf(" ", charBuffer0, (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      
      int int2 = ToolBox.StringTools.length(charBuffer0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      assertEquals(0, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      
      ToolBox toolBox0 = new ToolBox();
      assertNotNull(toolBox0);
      
      String string1 = "d1VM?iJ\\qQoD%o_t/:C";
      // Undeclared exception!
      try { 
        ToolBox.LocaleTools.toLocale("d1VM?iJqQoD%o_t/:C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: d1VM?iJqQoD%o_t/:C
         //
         verifyException("comp5111.assignment.cut.ToolBox$LocaleTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\r";
      stringArray0[1] = "rOhypg8 c";
      String string0 = ToolBox.StringTools.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      boolean boolean1 = ToolBox.StringTools.containsAny((CharSequence) "\r", (CharSequence) "\r");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = ToolBox.RegExTools.replaceAll("$.Y", "", "\r");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\r$\r.\rY\r", string1);
      
      ToolBox.CharSequenceTools toolBox_CharSequenceTools0 = new ToolBox.CharSequenceTools();
      assertNotNull(toolBox_CharSequenceTools0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ToolBox.ArrayTools.getLength(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = ToolBox.StringTools.getIfEmpty((CharSequence) null, supplier0);
      assertNull(charSequence0);
      
      int int0 = ToolBox.CharSequenceTools.lastIndexOf((CharSequence) null, (CharSequence) null, 4131);
      assertEquals((-1), int0);
      
      String string0 = ToolBox.RegExTools.replaceFirst("?aX", "", "p");
      assertNotNull(string0);
      assertEquals("p?aX", string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '8';
      charArray0[1] = 'a';
      int int1 = ToolBox.StringTools.indexOfAny((CharSequence) null, charArray0);
      assertTrue(int1 == int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', 'a'}, charArray0);
      assertEquals((-1), int1);
      
      boolean boolean0 = ToolBox.StringTools.containsAny((CharSequence) "?aX", (CharSequence) "p?aX");
      assertTrue(boolean0);
      
      String string1 = ToolBox.StringTools.LF;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\n", string1);
      
      boolean boolean1 = ToolBox.StringTools.isAllLowerCase("\n");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ToolBox.StringTools.isCreatable("\n");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int2 = ToolBox.StringTools.indexOfAnyBut((CharSequence) "", charArray0);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', 'a'}, charArray0);
      assertEquals((-1), int2);
      
      int int3 = ToolBox.StringTools.indexOfAny("?aX", charArray0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', 'a'}, charArray0);
      assertEquals(1, int3);
      
      boolean boolean3 = ToolBox.ArrayTools.isEmpty(charArray0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'8', 'a'}, charArray0);
      assertFalse(boolean3);
      
      boolean boolean4 = ToolBox.StringTools.equals((CharSequence) "", (CharSequence) "\n");
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'a';
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) '8';
      boolean boolean5 = ToolBox.ArrayTools.isEmpty(doubleArray0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {97.0, (-1.0), 56.0}, doubleArray0, 0.01);
      assertFalse(boolean5);
      
      Supplier<String> supplier1 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = ToolBox.StringTools.getIfEmpty("p", supplier1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("p", string2);
      
      ToolBox.StringTools toolBox_StringTools0 = new ToolBox.StringTools();
      assertNotNull(toolBox_StringTools0);
      assertEquals((-1), ToolBox.StringTools.INDEX_NOT_FOUND);
      
      short[] shortArray0 = new short[0];
      boolean boolean6 = ToolBox.ArrayTools.isEmpty(shortArray0);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean4);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean6);
      
      boolean boolean7 = ToolBox.StringTools.isCreatable("?aX");
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean2);
      assertFalse(boolean7 == boolean0);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean3);
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean1);
      assertFalse(boolean7);
      
      String string3 = ToolBox.RegExTools.replaceAll("p?aX", "", "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("p?aX", string3);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = ToolBox.RegExTools.replaceFirst(" ", (Pattern) null, "DC0.@v*B|%X(:");
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) " ");
      assertNotNull(charBuffer0);
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      
      boolean boolean0 = ToolBox.CharSequenceTools.regionMatches(charBuffer0, true, 0, " ", (-3997), (-1912));
      assertFalse(boolean0);
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) " ";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) " ";
      boolean boolean1 = ToolBox.ArrayTools.isEmpty(objectArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, objectArray0.length);
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean2 = ToolBox.ArrayTools.isEmpty(booleanArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = ToolBox.StringTools.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      CharSequence charSequence0 = ToolBox.StringTools.getIfEmpty((CharSequence) " ", (Supplier<CharSequence>) null);
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals(" ", charSequence0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) " ");
      assertNotNull(charBuffer0);
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      
      boolean boolean0 = ToolBox.StringTools.isEmpty(charBuffer0);
      assertFalse(boolean0);
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      
      CharBuffer charBuffer1 = CharBuffer.allocate(1);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertEquals("\u0000", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(1, charBuffer1.length());
      assertEquals(1, charBuffer1.remaining());
      assertTrue(charBuffer1.hasArray());
      assertFalse(charBuffer1.isReadOnly());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(1, charBuffer1.limit());
      assertEquals(0, charBuffer1.position());
      assertEquals(1, charBuffer1.capacity());
      assertEquals(0, charBuffer1.arrayOffset());
      
      int int0 = ToolBox.CharSequenceTools.indexOf(charBuffer0, " ", 13);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertEquals((-1), int0);
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      
      char[] charArray0 = ToolBox.CharSequenceTools.toCharArray(charBuffer0);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {' '}, charArray0);
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      
      boolean boolean1 = ToolBox.ArrayTools.isEmpty((char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = ToolBox.StringTools.indexOfAnyBut((CharSequence) " ", (CharSequence) " ");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = ToolBox.CharSequenceTools.lastIndexOf(charBuffer0, " ", 1);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      
      boolean boolean2 = ToolBox.CharSequenceTools.regionMatches("Zp,4j*+u0MVC", false, 1, charBuffer0, (-2706), (-1));
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      
      int int3 = ToolBox.CharSequenceTools.lastIndexOf(" ", charBuffer0, 71);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      
      int int4 = ToolBox.StringTools.indexOfAnyBut((CharSequence) " ", (CharSequence) "Zp,4j*+u0MVC");
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertEquals(0, int4);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("");
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      
      String string0 = ToolBox.RegExTools.replaceFirst("EC@uUs+H", pattern0, "");
      assertNotNull(string0);
      assertEquals("EC@uUs+H", string0);
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = ToolBox.StringTools.getIfEmpty((CharSequence) "EC@uUs+H", supplier0);
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals("EC@uUs+H", charSequence0);
      
      int int0 = ToolBox.StringTools.indexOfAnyBut((CharSequence) "EC@uUs+H", (CharSequence) "");
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ToolBox.RegExTools.replaceFirst("", "=WA8.{u2m<7[De#z", "EC@uUs+H");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 4\r
         // =WA8.{u2m<7[De#z\r
         //     ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = ToolBox.StringTools.compareIgnoreCase("}", "", true);
      assertEquals(1, int0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      
      int int1 = ToolBox.StringTools.indexOfAnyBut((CharSequence) "}", (CharSequence) charBuffer0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = ToolBox.RegExTools.replacePattern("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = ToolBox.CharSequenceTools.indexOf("", "", (-2179));
      assertEquals(0, int0);
      
      ToolBox.RegExTools toolBox_RegExTools0 = new ToolBox.RegExTools();
      assertNotNull(toolBox_RegExTools0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      charArray0[1] = 'V';
      charArray0[2] = 'x';
      charArray0[3] = 'l';
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'Z', 'V', 'x', 'l'}, charArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = ToolBox.StringTools.isNumeric("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ToolBox toolBox0 = new ToolBox();
      assertNotNull(toolBox0);
      
      boolean boolean2 = ToolBox.StringTools.isNumeric("");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-29);
      boolean boolean3 = ToolBox.ArrayTools.isEmpty(byteArray0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-29)}, byteArray0);
      assertFalse(boolean3);
      
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'Z', 'V', 'x', 'l'}, charArray0);
      assertEquals(4, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.capacity());
      assertEquals("ZVxl", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(4, charBuffer0.length());
      assertEquals(4, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      
      boolean boolean4 = ToolBox.CharSequenceTools.regionMatches("", false, (byte) (-29), charBuffer0, 0, 0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'Z', 'V', 'x', 'l'}, charArray0);
      assertFalse(boolean4);
      assertEquals(4, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.capacity());
      assertEquals("ZVxl", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(4, charBuffer0.length());
      assertEquals(4, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      
      int int1 = ToolBox.StringTools.indexOfAny("", charArray0);
      assertFalse(int1 == int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'Z', 'V', 'x', 'l'}, charArray0);
      assertEquals((-1), int1);
      
      String string1 = ToolBox.RegExTools.replaceAll("", "", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      int int0 = ToolBox.StringTools.compare("", "", false);
      assertEquals(0, int0);
      
      int int1 = ToolBox.CharSequenceTools.lastIndexOf("", "", 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = ToolBox.StringTools.isNumeric("");
      assertFalse(boolean0);
      
      String string2 = "uZjjJ~Z:";
      int int2 = ToolBox.StringTools.compareIgnoreCase("uZjjJ~Z:", (String) null, true);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      
      boolean boolean1 = ToolBox.StringTools.isAllUpperCase("uZjjJ~Z:");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        ToolBox.CharSequenceTools.indexOf((CharSequence) null, "", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("comp5111.assignment.cut.ToolBox$CharSequenceTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ToolBox.StringTools toolBox_StringTools0 = new ToolBox.StringTools();
      assertNotNull(toolBox_StringTools0);
      assertEquals((-1), ToolBox.StringTools.INDEX_NOT_FOUND);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '6';
      charArray0[1] = 'X';
      charArray0[2] = 'Y';
      charArray0[3] = '';
      charArray0[4] = ')';
      charArray0[5] = 'F';
      charArray0[6] = 'e';
      charArray0[7] = ' ';
      int int0 = ToolBox.StringTools.indexOfAny("\r", charArray0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'6', 'X', 'Y', '', ')', 'F', 'e', ' '}, charArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = ToolBox.StringTools.containsNone("\n", (char[]) null);
      assertTrue(boolean0);
      
      Pattern pattern0 = Pattern.compile("\r", 2553);
      assertNotNull(pattern0);
      assertEquals("\r", pattern0.pattern());
      assertEquals(2553, pattern0.flags());
      assertEquals("\r", pattern0.toString());
      
      String[] stringArray0 = pattern0.split((CharSequence) "\r", (-1));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      assertEquals("\r", pattern0.pattern());
      assertEquals(2553, pattern0.flags());
      assertEquals("\r", pattern0.toString());
      
      String string0 = ToolBox.RegExTools.replaceAll("\n", pattern0, "");
      assertNotNull(string0);
      assertEquals("\n", string0);
      assertEquals("\r", pattern0.pattern());
      assertEquals(2553, pattern0.flags());
      assertEquals("\r", pattern0.toString());
      
      int int1 = ToolBox.StringTools.length(" ");
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      String string1 = ToolBox.RegExTools.replacePattern("", (String) null, "{|0+Efv-Cz05gf;");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)68;
      boolean boolean1 = ToolBox.ArrayTools.isEmpty(byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte) (-85), (byte)0, (byte)68}, byteArray0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      
      boolean boolean0 = ToolBox.StringTools.containsNone(charBuffer0, (char[]) null);
      assertTrue(boolean0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ToolBox toolBox0 = new ToolBox();
      assertNotNull(toolBox0);
      
      boolean boolean0 = ToolBox.ArrayTools.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      String string0 = null;
      int int0 = ToolBox.StringTools.compareIgnoreCase((String) null, "comp5111.assignment.cut.ToolBox$CharSequenceTools", true);
      assertEquals((-1), int0);
      
      String string1 = "comp5111.assignment.cut.ToolBox";
      String string2 = "";
      // Undeclared exception!
      try { 
        ToolBox.RegExTools.replaceFirst("comp5111.assignment.cut.ToolBox", "nyY+Ye1yJ\"{", "");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 9\r
         // nyY+Ye1yJ\"{\r
         //          ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = ToolBox.ArrayTools.isEmpty((byte[]) null);
      assertTrue(boolean0);
      
      String string0 = "";
      Pattern pattern0 = Pattern.compile("", 1742);
      assertNotNull(pattern0);
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      assertEquals(1742, pattern0.flags());
      
      String string1 = ToolBox.RegExTools.replaceFirst("", pattern0, "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      assertEquals(1742, pattern0.flags());
      
      Stream<String> stream0 = pattern0.splitAsStream("");
      assertNotNull(stream0);
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      assertEquals(1742, pattern0.flags());
      
      char[] charArray0 = new char[3];
      String[] stringArray0 = new String[2];
      stringArray0[0] = "g0xp]>EXZ-^e";
      stringArray0[1] = "";
      String string2 = ToolBox.StringTools.getCommonPrefix(stringArray0);
      assertTrue(string2.equals((Object)string1));
      assertEquals(2, stringArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      
      Stream<String> stream1 = pattern0.splitAsStream("");
      assertFalse(stream1.equals((Object)stream0));
      assertNotNull(stream1);
      assertNotSame(stream1, stream0);
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      assertEquals(1742, pattern0.flags());
      
      String[] stringArray1 = pattern0.split((CharSequence) "", (-1759));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      assertEquals(1742, pattern0.flags());
      
      charArray0[2] = '!';
      int int0 = ToolBox.StringTools.indexOfAny("", charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '!'}, charArray0);
      assertEquals((-1), int0);
      
      int int1 = ToolBox.StringTools.compareIgnoreCase((String) null, "", true);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      char[] charArray1 = ToolBox.CharSequenceTools.toCharArray("g0xp]>EXZ-^e");
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(12, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean boolean1 = ToolBox.StringTools.containsAny((CharSequence) "", charArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(12, charArray1.length);
      assertFalse(boolean1);
      assertNotSame(charArray1, charArray0);
      
      boolean boolean2 = ToolBox.CharSequenceTools.regionMatches("", true, 3484, "", (-1), (-1759));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        ToolBox.LocaleTools.toLocale("g0xp]>EXZ-^e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: g0xp]>EXZ-^e
         //
         verifyException("comp5111.assignment.cut.ToolBox$LocaleTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ToolBox.LocaleTools toolBox_LocaleTools0 = new ToolBox.LocaleTools();
      assertNotNull(toolBox_LocaleTools0);
      
      ToolBox.ArrayTools toolBox_ArrayTools0 = new ToolBox.ArrayTools();
      assertNotNull(toolBox_ArrayTools0);
      assertEquals((-1), ToolBox.ArrayTools.INDEX_NOT_FOUND);
      
      CharSequence charSequence0 = null;
      char[] charArray0 = ToolBox.CharSequenceTools.toCharArray((CharSequence) null);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = 0;
      int int1 = ToolBox.CharSequenceTools.lastIndexOf((CharSequence) null, (CharSequence) null, 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = 0;
      int int3 = 3484;
      // Undeclared exception!
      try { 
        ToolBox.CharSequenceTools.regionMatches((CharSequence) null, true, 0, (CharSequence) null, (-1), 3484);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("comp5111.assignment.cut.ToolBox$CharSequenceTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "{72";
      String string1 = ToolBox.RegExTools.replaceAll("", "", "{72");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("{72", string1);
      
      boolean boolean0 = ToolBox.StringTools.isMixedCase("{72");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ToolBox.LocaleTools.toLocale("X$Cy,Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: X$Cy,Q
         //
         verifyException("comp5111.assignment.cut.ToolBox$LocaleTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "{72";
      String string1 = ToolBox.RegExTools.replaceAll("", "", "{72");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("{72", string1);
      
      boolean boolean0 = ToolBox.StringTools.isMixedCase("{72");
      assertFalse(boolean0);
      
      Locale locale0 = ToolBox.LocaleTools.toLocale("");
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      
      int int0 = 76;
      int int1 = 0;
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "{72", 76, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ToolBox.ArrayTools toolBox_ArrayTools0 = new ToolBox.ArrayTools();
      assertNotNull(toolBox_ArrayTools0);
      assertEquals((-1), ToolBox.ArrayTools.INDEX_NOT_FOUND);
      
      String string0 = ToolBox.RegExTools.replaceFirst(";~", ";~", ";~");
      assertNotNull(string0);
      assertEquals(";~", string0);
      
      String string1 = ToolBox.RegExTools.replaceAll(";~", ";~", ";~");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(";~", string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = ";~";
      stringArray0[1] = ";~";
      stringArray0[2] = ";~";
      stringArray0[3] = ";~";
      String string2 = ToolBox.StringTools.getCommonPrefix(stringArray0);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(4, stringArray0.length);
      assertNotNull(string2);
      assertEquals(";~", string2);
      
      boolean boolean0 = ToolBox.StringTools.isNumeric(";~");
      assertFalse(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      boolean boolean1 = ToolBox.ArrayTools.isEmpty(longArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L)}, longArray0);
      assertFalse(boolean1);
      
      Pattern pattern0 = Pattern.compile("gvl<]6");
      assertNotNull(pattern0);
      assertEquals("gvl<]6", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("gvl<]6", pattern0.pattern());
      
      Predicate<String> predicate0 = pattern0.asPredicate();
      assertNotNull(predicate0);
      assertEquals("gvl<]6", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("gvl<]6", pattern0.pattern());
      
      String string3 = ToolBox.RegExTools.replaceFirst("l*km", pattern0, "");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("l*km", string3);
      assertEquals("gvl<]6", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("gvl<]6", pattern0.pattern());
      
      String string4 = ToolBox.RegExTools.replaceAll("W,NwzK8n#*wrrL%:Q!I", ";~", "/wia/NUx*V&g{o4");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("W,NwzK8n#*wrrL%:Q!I", string4);
      
      boolean boolean2 = ToolBox.StringTools.containsNone("gvl<]6", toolBox_ArrayTools0.EMPTY_CHAR_ARRAY);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals((-1), ToolBox.ArrayTools.INDEX_NOT_FOUND);
      
      boolean boolean3 = ToolBox.StringTools.isCreatable(";~");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = ToolBox.RegExTools.replaceFirst("K&G.Q", "K&G.Q", "K&G.Q");
      assertNotNull(string0);
      assertEquals("K&G.Q", string0);
      
      char[] charArray0 = ToolBox.CharSequenceTools.toCharArray("K&G.Q");
      assertEquals(5, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'K', '&', 'G', '.', 'Q'}, charArray0);
      
      String string1 = ToolBox.StringTools.CR;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\r", string1);
      
      boolean boolean0 = ToolBox.CharSequenceTools.regionMatches("\r", false, 0, "K&G.Q", 0, 0);
      assertTrue(boolean0);
      
      ToolBox.ArrayTools toolBox_ArrayTools0 = new ToolBox.ArrayTools();
      assertNotNull(toolBox_ArrayTools0);
      assertEquals((-1), ToolBox.ArrayTools.INDEX_NOT_FOUND);
      
      boolean boolean1 = ToolBox.StringTools.isCreatable("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = ToolBox.CharSequenceTools.lastIndexOf("K&G.Q", 0, (-4013));
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\r";
      stringArray0[1] = "K&G.Q";
      stringArray0[2] = "K&G.Q";
      stringArray0[3] = "K&G.Q";
      stringArray0[4] = "\r";
      stringArray0[5] = "K&G.Q";
      String string2 = ToolBox.StringTools.getCommonPrefix(stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(6, stringArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean2 = ToolBox.StringTools.isNumeric("K&G.Q");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int1 = ToolBox.CharSequenceTools.indexOf("\r", 293, 293);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = ToolBox.StringTools.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String string1 = ToolBox.StringTools.getCommonPrefix(stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = ToolBox.StringTools.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      boolean boolean1 = ToolBox.StringTools.isMixedCase("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = ToolBox.StringTools.indexOfDifference(stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals((-1), int0);
      
      ToolBox toolBox0 = new ToolBox();
      assertNotNull(toolBox0);
      
      String string2 = ToolBox.RegExTools.replaceFirst((String) null, (Pattern) null, (String) null);
      assertNull(string2);
      
      String string3 = ToolBox.RegExTools.replaceFirst((String) null, (Pattern) null, (String) null);
      assertNull(string3);
      
      String string4 = ToolBox.StringTools.getCommonPrefix(stringArray0);
      assertTrue(string4.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = ToolBox.StringTools.SPACE;
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals(" ", string5);
      
      boolean boolean2 = ToolBox.CharSequenceTools.regionMatches("", false, 3282, " ", 3282, (-1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int1 = ToolBox.StringTools.length((CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean3 = ToolBox.ArrayTools.isEmpty((Object[]) stringArray0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean3);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      boolean boolean4 = ToolBox.ArrayTools.isEmpty(byteArray0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-40), (byte)10, (byte)1, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = ToolBox.StringTools.compare((String) null, "", false);
      assertEquals(1, int0);
      
      ToolBox.CharSequenceTools toolBox_CharSequenceTools0 = new ToolBox.CharSequenceTools();
      assertNotNull(toolBox_CharSequenceTools0);
      
      boolean boolean0 = ToolBox.StringTools.isEmpty("");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '7';
      charArray0[1] = '<';
      charArray0[2] = 'C';
      charArray0[3] = '4';
      charArray0[4] = 'j';
      charArray0[5] = '@';
      int int1 = ToolBox.StringTools.indexOfAny((CharSequence) null, charArray0);
      assertFalse(int1 == int0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'7', '<', 'C', '4', 'j', '@'}, charArray0);
      assertEquals((-1), int1);
      
      char[] charArray1 = ToolBox.CharSequenceTools.toCharArray((CharSequence) null);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray1, charArray0);
      
      ToolBox.LocaleTools toolBox_LocaleTools0 = new ToolBox.LocaleTools();
      assertNotNull(toolBox_LocaleTools0);
      
      String string0 = ToolBox.RegExTools.replaceAll("", (String) null, "(/#M%p(3WFo9%F>");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int2 = ToolBox.StringTools.indexOfAnyBut((CharSequence) "(/#M%p(3WFo9%F>", charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals((-1), int2);
      assertNotSame(charArray1, charArray0);
      
      int int3 = ToolBox.StringTools.indexOfAnyBut((CharSequence) null, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'7', '<', 'C', '4', 'j', '@'}, charArray0);
      assertEquals((-1), int3);
      assertNotSame(charArray0, charArray1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "";
      int int4 = ToolBox.StringTools.indexOfDifference(charSequenceArray0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(0, int4);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'O';
      charArray0[1] = 'M';
      charArray0[2] = 'k';
      charArray0[3] = '\'';
      charArray0[4] = '/';
      charArray0[5] = '>';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'O', 'M', 'k', '\'', '/', '>'}, charArray0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(6, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(6, charBuffer0.remaining());
      assertEquals(6, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(6, charBuffer0.length());
      assertEquals("OMk'/>", charBuffer0.toString());
      
      boolean boolean0 = ToolBox.StringTools.isAllUpperCase(charBuffer0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'O', 'M', 'k', '\'', '/', '>'}, charArray0);
      assertFalse(boolean0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(6, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(6, charBuffer0.remaining());
      assertEquals(6, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(6, charBuffer0.length());
      assertEquals("OMk'/>", charBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Pattern pattern0 = Pattern.compile(",8", 5);
      assertNotNull(pattern0);
      assertEquals(",8", pattern0.toString());
      assertEquals(",8", pattern0.pattern());
      assertEquals(5, pattern0.flags());
      
      String string0 = ToolBox.RegExTools.replaceFirst((String) null, pattern0, "L");
      assertNull(string0);
      assertEquals(",8", pattern0.toString());
      assertEquals(",8", pattern0.pattern());
      assertEquals(5, pattern0.flags());
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null, 5, (-1238));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "_";
      String string1 = ToolBox.RegExTools.replaceAll("_", (String) null, "_");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("_", string1);
      
      // Undeclared exception!
      try { 
        ToolBox.CharSequenceTools.regionMatches("_", false, 1114111, (CharSequence) null, 61, 61);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("comp5111.assignment.cut.ToolBox$CharSequenceTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = ToolBox.StringTools.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      ToolBox.CharSequenceTools toolBox_CharSequenceTools0 = new ToolBox.CharSequenceTools();
      assertNotNull(toolBox_CharSequenceTools0);
      
      Pattern pattern0 = Pattern.compile("Ns9<4;@n");
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals("Ns9<4;@n", pattern0.toString());
      assertEquals("Ns9<4;@n", pattern0.pattern());
      
      String string0 = ToolBox.RegExTools.replaceAll("Ns9<4;@n", pattern0, "Ns9<4;@n");
      assertNotNull(string0);
      assertEquals("Ns9<4;@n", string0);
      assertEquals(0, pattern0.flags());
      assertEquals("Ns9<4;@n", pattern0.toString());
      assertEquals("Ns9<4;@n", pattern0.pattern());
      
      boolean boolean1 = ToolBox.StringTools.isAllUpperCase("Ns9<4;@n");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = ToolBox.StringTools.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = ToolBox.StringTools.length("");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[0];
      int int1 = ToolBox.StringTools.indexOfAny("", charArray0);
      assertFalse(int1 == int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int1);
      
      ToolBox.CharTools toolBox_CharTools0 = new ToolBox.CharTools();
      assertNotNull(toolBox_CharTools0);
      assertEquals('\r', ToolBox.CharTools.CR);
      assertEquals('\n', ToolBox.CharTools.LF);
      assertEquals('\u0000', ToolBox.CharTools.NUL);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = ToolBox.StringTools.getIfEmpty("S GM", supplier0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("S GM", string1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      assertFalse(boolean0);
      
      int int2 = ToolBox.StringTools.compare("t-'?gag,sXYz:v>h", (String) null, true);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      
      int int3 = ToolBox.StringTools.indexOfAnyBut((CharSequence) "", (CharSequence) "t-'?gag,sXYz:v>h");
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals((-1), int3);
      
      Pattern pattern0 = Pattern.compile("", (-4599));
      assertNotNull(pattern0);
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals((-4599), pattern0.flags());
      
      String string2 = ToolBox.RegExTools.replaceFirst("", pattern0, "");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals((-4599), pattern0.flags());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "t-'?gag,sXYz:v>h";
      objectArray0[3] = (Object) "";
      boolean boolean1 = ToolBox.ArrayTools.isEmpty(objectArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, objectArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = ToolBox.ArrayTools.isEmpty((Object[]) null);
      assertTrue(boolean0);
      
      Pattern pattern0 = Pattern.compile("V(eF&g@&)xdup7A;eL");
      assertNotNull(pattern0);
      assertEquals("V(eF&g@&)xdup7A;eL", pattern0.toString());
      assertEquals("V(eF&g@&)xdup7A;eL", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      
      Matcher matcher0 = pattern0.matcher("V(eF&g@&)xdup7A;eL");
      assertNotNull(matcher0);
      assertEquals("V(eF&g@&)xdup7A;eL", pattern0.toString());
      assertEquals("V(eF&g@&)xdup7A;eL", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertFalse(matcher0.hasTransparentBounds());
      assertEquals("java.util.regex.Matcher[pattern=V(eF&g@&)xdup7A;eL region=0,18 lastmatch=]", matcher0.toString());
      assertEquals(1, matcher0.groupCount());
      assertTrue(matcher0.hasAnchoringBounds());
      
      Predicate<String> predicate0 = pattern0.asPredicate();
      assertNotNull(predicate0);
      assertEquals("V(eF&g@&)xdup7A;eL", pattern0.toString());
      assertEquals("V(eF&g@&)xdup7A;eL", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      
      String string0 = ToolBox.RegExTools.replaceAll("V(eF&g@&)xdup7A;eL", pattern0, "yYSAk?3*xBO/");
      assertNotNull(string0);
      assertEquals("V(eF&g@&)xdup7A;eL", string0);
      assertEquals("V(eF&g@&)xdup7A;eL", pattern0.toString());
      assertEquals("V(eF&g@&)xdup7A;eL", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      
      int int0 = ToolBox.CharSequenceTools.indexOf("yYSAk?3*xBO/", 65, 0);
      assertEquals(3, int0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "V(eF&g@&)xdup7A;eL");
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("V(eF&g@&)xdup7A;eL", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(18, charBuffer0.length());
      assertEquals(18, charBuffer0.capacity());
      assertEquals(18, charBuffer0.limit());
      assertEquals(18, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'w';
      charArray0[1] = 'H';
      charArray0[2] = '_';
      charArray0[3] = '3';
      charArray0[4] = 'H';
      charArray0[5] = '[';
      charArray0[6] = 'L';
      boolean boolean1 = ToolBox.StringTools.containsNone(charBuffer0, charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'w', 'H', '_', '3', 'H', '[', 'L'}, charArray0);
      assertFalse(boolean1);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("V(eF&g@&)xdup7A;eL", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(18, charBuffer0.length());
      assertEquals(18, charBuffer0.capacity());
      assertEquals(18, charBuffer0.limit());
      assertEquals(18, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = ToolBox.RegExTools.replacePattern("a5so00]5!De/", "a5so00]5!De/", "a5so00]5!De/");
      assertNotNull(string0);
      assertEquals("a5so00]5!De/", string0);
      
      ToolBox.LocaleTools toolBox_LocaleTools0 = new ToolBox.LocaleTools();
      assertNotNull(toolBox_LocaleTools0);
      
      int int0 = ToolBox.StringTools.indexOfAnyBut((CharSequence) "a5so00]5!De/", (CharSequence) "a5so00]5!De/");
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'U';
      charArray0[1] = 'O';
      charArray0[2] = ']';
      charArray0[3] = 'K';
      charArray0[4] = '6';
      charArray0[5] = ')';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'U', 'O', ']', 'K', '6', ')'}, charArray0);
      assertEquals(6, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(6, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(6, charBuffer0.limit());
      assertEquals("UO]K6)", charBuffer0.toString());
      assertEquals(6, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      
      int int1 = ToolBox.CharSequenceTools.lastIndexOf(charBuffer0, (-1), (-1931));
      assertTrue(int1 == int0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'U', 'O', ']', 'K', '6', ')'}, charArray0);
      assertEquals((-1), int1);
      assertEquals(6, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(6, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(6, charBuffer0.limit());
      assertEquals("UO]K6)", charBuffer0.toString());
      assertEquals(6, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      
      String string1 = ToolBox.RegExTools.replacePattern("_", "a5so00]5!De/", "a5so00]5!De/");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("_", string1);
      
      boolean boolean0 = ToolBox.StringTools.isEmpty(charBuffer0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'U', 'O', ']', 'K', '6', ')'}, charArray0);
      assertFalse(boolean0);
      assertEquals(6, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(6, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(6, charBuffer0.limit());
      assertEquals("UO]K6)", charBuffer0.toString());
      assertEquals(6, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      
      int int2 = ToolBox.StringTools.indexOfAnyBut((CharSequence) charBuffer0, (CharSequence) charBuffer0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'U', 'O', ']', 'K', '6', ')'}, charArray0);
      assertEquals((-1), int2);
      assertEquals(6, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(6, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(6, charBuffer0.limit());
      assertEquals("UO]K6)", charBuffer0.toString());
      assertEquals(6, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      
      int int3 = ToolBox.CharSequenceTools.indexOf("_", (-1931), 0);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals((-1), int3);
      
      boolean boolean1 = ToolBox.StringTools.isCreatable("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) ']';
      objectArray0[1] = (Object) 'K';
      objectArray0[2] = (Object) "_";
      objectArray0[3] = (Object) "a5so00]5!De/";
      objectArray0[4] = (Object) 'O';
      objectArray0[5] = (Object) 'O';
      objectArray0[6] = (Object) charBuffer0;
      objectArray0[7] = (Object) 'O';
      objectArray0[8] = (Object) charBuffer0;
      boolean boolean2 = ToolBox.ArrayTools.isEmpty(objectArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(9, objectArray0.length);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CharSequence charSequence0 = null;
      // Undeclared exception!
      try { 
        ToolBox.CharSequenceTools.lastIndexOf((CharSequence) null, 341, 341);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("comp5111.assignment.cut.ToolBox$CharSequenceTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1422;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = 93;
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1422, (-1), 0, 93}, intArray0);
      assertFalse(boolean0);
      
      String string0 = ToolBox.RegExTools.replaceAll("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      
      Buffer buffer0 = charBuffer0.mark();
      assertNotNull(buffer0);
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(buffer0.isDirect());
      assertFalse(buffer0.hasRemaining());
      assertEquals(0, buffer0.limit());
      assertEquals(0, buffer0.position());
      assertEquals(0, buffer0.capacity());
      assertFalse(buffer0.hasArray());
      assertEquals(0, buffer0.remaining());
      assertTrue(buffer0.isReadOnly());
      
      int int0 = ToolBox.CharSequenceTools.indexOf(charBuffer0, 93, 93);
      assertEquals((-1), int0);
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      
      int int1 = ToolBox.CharSequenceTools.indexOf("", 93, 2797);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = ToolBox.StringTools.containsAny((CharSequence) "", (CharSequence) "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = ToolBox.RegExTools.replaceAll("", "N4x+GWKJPdaWNf$@a6", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      double[] doubleArray0 = new double[0];
      boolean boolean2 = ToolBox.ArrayTools.isEmpty(doubleArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ToolBox toolBox0 = new ToolBox();
      assertNotNull(toolBox0);
      
      String string0 = ToolBox.RegExTools.replacePattern("nz<tm[.*S", "\n", "\n");
      assertNotNull(string0);
      assertEquals("nz<tm[.*S", string0);
      
      int int0 = ToolBox.StringTools.length("nz<tm[.*S");
      assertEquals(9, int0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)3772;
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)3772}, shortArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = ToolBox.StringTools.isCreatable("\n");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ToolBox.StringTools.isEmpty("nz<tm[.*S");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int1 = ToolBox.StringTools.indexOfAnyBut((CharSequence) "\n", (CharSequence) "nz<tm[.*S");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean boolean3 = ToolBox.ArrayTools.isEmpty(booleanArray0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = ToolBox.ArrayTools.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      ToolBox.ArrayTools toolBox_ArrayTools0 = new ToolBox.ArrayTools();
      assertNotNull(toolBox_ArrayTools0);
      assertEquals((-1), ToolBox.ArrayTools.INDEX_NOT_FOUND);
      
      ToolBox.LocaleTools toolBox_LocaleTools0 = new ToolBox.LocaleTools();
      assertNotNull(toolBox_LocaleTools0);
      
      String string0 = ToolBox.RegExTools.replaceFirst("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = ToolBox.CharSequenceTools.indexOf("", "", 598);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = ToolBox.RegExTools.replacePattern("DSa*M`,", "", "");
      assertNotNull(string0);
      assertEquals("DSa*M`,", string0);
      
      int int0 = ToolBox.CharSequenceTools.lastIndexOf("DSa*M`,", (-2730), (-842));
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "DSa*M`,";
      int int1 = ToolBox.StringTools.indexOfDifference(charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int1);
      
      ToolBox.LocaleTools toolBox_LocaleTools0 = new ToolBox.LocaleTools();
      assertNotNull(toolBox_LocaleTools0);
      
      int int2 = ToolBox.CharSequenceTools.indexOf("", "DSa*M`,", (-2655));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      boolean boolean0 = ToolBox.StringTools.isCreatable("DSa*M`,");
      assertFalse(boolean0);
      
      boolean boolean1 = ToolBox.StringTools.isAllUpperCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = ToolBox.RegExTools.replaceFirst("comp5111.assignment.cut.ToolBox$StringTools", (String) null, "DSa*M`,");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("comp5111.assignment.cut.ToolBox$StringTools", string1);
      
      String string2 = ToolBox.RegExTools.replaceAll("cbxG9Dbarq7", "", (String) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("cbxG9Dbarq7", string2);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'j';
      charArray0[1] = '3';
      charArray0[2] = 'W';
      charArray0[3] = 'j';
      charArray0[4] = 'c';
      charArray0[5] = 'P';
      boolean boolean2 = ToolBox.StringTools.containsAny(charSequenceArray0[3], charArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'j', '3', 'W', 'j', 'c', 'P'}, charArray0);
      assertFalse(boolean2);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'j';
      longArray0[1] = (long) 'P';
      longArray0[2] = (long) 'j';
      boolean boolean3 = ToolBox.ArrayTools.isEmpty(longArray0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {106L, 80L, 106L}, longArray0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1511.6669F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-2199.0F);
      floatArray0[3] = 2014.4188F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 456.3628F;
      floatArray0[6] = 0.0F;
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {1511.6669F, 0.0F, (-2199.0F), 2014.4188F, 0.0F, 456.3628F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      String string0 = ToolBox.RegExTools.replaceAll("", "x:KVB@?H=v>3>3`EyP6", "x:KVB@?H=v>3>3`EyP6");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = ToolBox.StringTools.LF;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\n", string1);
      
      boolean boolean1 = ToolBox.StringTools.equals((CharSequence) "", (CharSequence) "\n");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = ToolBox.CharSequenceTools.lastIndexOf("\n", "\n", (-1));
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String string2 = ToolBox.StringTools.getCommonPrefix(stringArray0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(3, stringArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean2 = ToolBox.StringTools.contains("", (-1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = ToolBox.RegExTools.replaceAll("<@P|F*4O `%2Jl!ZP", "<@P|F*4O `%2Jl!ZP", "");
      assertNotNull(string0);
      assertEquals("|F*", string0);
      
      String string1 = ToolBox.RegExTools.replacePattern("|F*", "", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("|F*", string1);
      
      String string2 = ToolBox.RegExTools.replacePattern((String) null, (String) null, "|F*");
      assertNull(string2);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean0);
      
      ToolBox.StringTools toolBox_StringTools0 = new ToolBox.StringTools();
      assertNotNull(toolBox_StringTools0);
      assertEquals((-1), ToolBox.StringTools.INDEX_NOT_FOUND);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "\r";
      charSequenceArray0[1] = (CharSequence) "\n";
      int int0 = ToolBox.StringTools.indexOfDifference(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string3 = ToolBox.RegExTools.replacePattern("comp5111.assignment.cut.ToolBox$CharTools", (String) null, "comp5111.assignment.cut.ToolBox$LocaleTools");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("comp5111.assignment.cut.ToolBox$CharTools", string3);
      
      ToolBox.StringTools toolBox_StringTools1 = new ToolBox.StringTools();
      assertFalse(toolBox_StringTools1.equals((Object)toolBox_StringTools0));
      assertNotNull(toolBox_StringTools1);
      assertEquals((-1), ToolBox.StringTools.INDEX_NOT_FOUND);
      
      int int1 = ToolBox.CharSequenceTools.lastIndexOf("comp5111.assignment.cut.ToolBox$CharTools", "comp5111.assignment.cut.ToolBox$CharTools", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = ToolBox.StringTools.equals((CharSequence) "comp5111.assignment.cut.ToolBox$CharTools", (CharSequence) " ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) (-1);
      boolean boolean2 = ToolBox.ArrayTools.isEmpty(floatArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = ToolBox.RegExTools.replaceAll("8&3", "8&3", "8&3");
      assertNotNull(string0);
      assertEquals("8&3", string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'f';
      charArray0[1] = 'H';
      charArray0[2] = '|';
      charArray0[3] = 's';
      charArray0[4] = 'I';
      charArray0[5] = '[';
      charArray0[6] = '.';
      boolean boolean0 = ToolBox.StringTools.containsNone("8&3", charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'f', 'H', '|', 's', 'I', '[', '.'}, charArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = ToolBox.StringTools.isNumeric("8&3");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ToolBox.ArrayTools.isEmpty(charArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'f', 'H', '|', 's', 'I', '[', '.'}, charArray0);
      assertFalse(boolean2);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "8&3";
      stringArray0[1] = "8&3";
      stringArray0[2] = "8&3";
      stringArray0[3] = "8&3";
      stringArray0[4] = "8&3";
      stringArray0[5] = "8&3";
      String string1 = ToolBox.StringTools.getCommonPrefix(stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(6, stringArray0.length);
      assertNotNull(string1);
      assertEquals("8&3", string1);
      
      int int0 = ToolBox.StringTools.indexOfAnyBut((CharSequence) "8&3", charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'f', 'H', '|', 's', 'I', '[', '.'}, charArray0);
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[0];
      boolean boolean3 = ToolBox.ArrayTools.isEmpty(shortArray0);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean3);
      
      int int1 = ToolBox.StringTools.indexOfAnyBut((CharSequence) "8&3", (CharSequence) "8&3");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean0);
      
      ToolBox.RegExTools toolBox_RegExTools0 = new ToolBox.RegExTools();
      assertNotNull(toolBox_RegExTools0);
      
      String string0 = ToolBox.RegExTools.replacePattern("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string1 = ToolBox.StringTools.getCommonPrefix(stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = ToolBox.StringTools.compare((String) null, "", true);
      assertEquals((-1), int0);
      
      boolean boolean1 = ToolBox.StringTools.isCreatable("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ToolBox.CharSequenceTools toolBox_CharSequenceTools0 = new ToolBox.CharSequenceTools();
      assertNotNull(toolBox_CharSequenceTools0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) (-1);
      longArray0[8] = (long) (-1);
      boolean boolean2 = ToolBox.ArrayTools.isEmpty(longArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), (-1L), (-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ToolBox.CharTools toolBox_CharTools0 = new ToolBox.CharTools();
      assertNotNull(toolBox_CharTools0);
      assertEquals('\r', ToolBox.CharTools.CR);
      assertEquals('\n', ToolBox.CharTools.LF);
      assertEquals('\u0000', ToolBox.CharTools.NUL);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\r';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, Integer.MAX_VALUE, (-1624));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = ToolBox.StringTools.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      boolean boolean0 = ToolBox.StringTools.isMixedCase("\r");
      assertFalse(boolean0);
      
      int int0 = ToolBox.CharSequenceTools.lastIndexOf("\r", (-1), 120);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean1 = ToolBox.ArrayTools.isEmpty(booleanArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean1);
      
      int int1 = ToolBox.CharSequenceTools.indexOf("\r", "\r", (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 43;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = (-2224);
      intArray0[8] = 525;
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 43, 0, 0, 0, 0, (-2224), 525}, intArray0);
      assertFalse(boolean0);
      
      int int0 = ToolBox.ArrayTools.getLength((Object) null);
      assertEquals(0, int0);
      
      boolean boolean1 = ToolBox.StringTools.isAllLowerCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ToolBox.CharSequenceTools toolBox_CharSequenceTools0 = new ToolBox.CharSequenceTools();
      assertNotNull(toolBox_CharSequenceTools0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'V';
      charArray0[1] = 'x';
      charArray0[2] = ')';
      charArray0[3] = 'k';
      charArray0[4] = 'M';
      charArray0[5] = 'Z';
      charArray0[6] = '6';
      charArray0[7] = '/';
      boolean boolean2 = ToolBox.ArrayTools.isEmpty(charArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'V', 'x', ')', 'k', 'M', 'Z', '6', '/'}, charArray0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = ToolBox.StringTools.isCreatable("S,JKWNQ\"at^Jj]Wp<g,");
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1118;
      shortArray0[1] = (short) (-1921);
      shortArray0[2] = (short)3700;
      shortArray0[3] = (short) (-1763);
      shortArray0[4] = (short)32;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short)1106;
      boolean boolean1 = ToolBox.ArrayTools.isEmpty(shortArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)1118, (short) (-1921), (short)3700, (short) (-1763), (short)32, (short) (-1), (short)1106}, shortArray0);
      assertFalse(boolean1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-1921);
      boolean boolean2 = ToolBox.ArrayTools.isEmpty(longArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-1921L)}, longArray0);
      assertFalse(boolean2);
      
      int int0 = ToolBox.StringTools.compareIgnoreCase("S,JKWNQ\"at^Jj]Wp<g,", "p*V8*k$", false);
      assertEquals(3, int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)0;
      boolean boolean3 = ToolBox.ArrayTools.isEmpty(byteArray0);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)13, (byte)57, (byte)0}, byteArray0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = ToolBox.RegExTools.replaceFirst("K&G.Q", "K&G.Q", "K&G.Q");
      assertNotNull(string0);
      assertEquals("K&G.Q", string0);
      
      char[] charArray0 = ToolBox.CharSequenceTools.toCharArray("K&G.Q");
      assertEquals(5, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'K', '&', 'G', '.', 'Q'}, charArray0);
      
      String string1 = ToolBox.StringTools.CR;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\r", string1);
      
      ToolBox.ArrayTools toolBox_ArrayTools0 = new ToolBox.ArrayTools();
      assertNotNull(toolBox_ArrayTools0);
      assertEquals((-1), ToolBox.ArrayTools.INDEX_NOT_FOUND);
      
      boolean boolean0 = ToolBox.StringTools.isCreatable("K&G.Q");
      assertFalse(boolean0);
      
      int int0 = ToolBox.CharSequenceTools.lastIndexOf("K&G.Q", 0, (-4013));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "9";
      // Undeclared exception!
      try { 
        ToolBox.LocaleTools.toLocale("9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 9
         //
         verifyException("comp5111.assignment.cut.ToolBox$LocaleTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        ToolBox.CharSequenceTools.indexOf((CharSequence) null, 0, 1336);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("comp5111.assignment.cut.ToolBox$CharSequenceTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '0';
      charArray0[1] = 'P';
      charArray0[2] = ':';
      charArray0[3] = 'R';
      charArray0[4] = ',';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'0', 'P', ':', 'R', ','}, charArray0);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("0P:R,", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(5, charBuffer0.length());
      assertEquals(5, charBuffer0.remaining());
      assertEquals(5, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      
      boolean boolean0 = ToolBox.StringTools.isMixedCase(charBuffer0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'0', 'P', ':', 'R', ','}, charArray0);
      assertFalse(boolean0);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("0P:R,", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(5, charBuffer0.length());
      assertEquals(5, charBuffer0.remaining());
      assertEquals(5, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "b";
      String string1 = ToolBox.RegExTools.replaceAll("b", (Pattern) null, "b");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("b", string1);
      
      boolean boolean0 = ToolBox.StringTools.isAllLowerCase("b");
      assertTrue(boolean0);
      
      ToolBox.ArrayTools toolBox_ArrayTools0 = new ToolBox.ArrayTools();
      assertNotNull(toolBox_ArrayTools0);
      assertEquals((-1), ToolBox.ArrayTools.INDEX_NOT_FOUND);
      
      boolean boolean1 = ToolBox.StringTools.contains("b", (-1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = "ANIV[H#n<[UhH ;8]b";
      String string3 = ToolBox.RegExTools.replaceFirst("ANIV[H#n<[UhH ;8]b", (Pattern) null, "b");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("ANIV[H#n<[UhH ;8]b", string3);
      
      int int0 = 1;
      int int1 = ToolBox.CharSequenceTools.indexOf("b", "ANIV[H#n<[UhH ;8]b", 1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        ToolBox.ArrayTools.getLength("ANIV[H#n<[UhH ;8]b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = ToolBox.StringTools.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[1] = '\'';
      charArray0[2] = ',';
      charArray0[3] = 'o';
      charArray0[4] = 'a';
      boolean boolean0 = ToolBox.StringTools.containsAny((CharSequence) " ", charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'@', '\'', ',', 'o', 'a'}, charArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = ToolBox.StringTools.contains(" ", 97);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = ToolBox.StringTools.compareIgnoreCase((String) null, "r91|82$K^$<w}]h'J$", false);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ToolBox toolBox0 = new ToolBox();
      assertNotNull(toolBox0);
      
      String string0 = ToolBox.StringTools.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      int int0 = ToolBox.CharSequenceTools.indexOf("\n", (-2160), 108);
      assertEquals((-1), int0);
      
      Pattern pattern0 = Pattern.compile("\n");
      assertNotNull(pattern0);
      assertEquals("\n", pattern0.toString());
      assertEquals("\n", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      
      String string1 = ToolBox.RegExTools.replaceAll("\n", pattern0, (String) null);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\n", string1);
      assertEquals("\n", pattern0.toString());
      assertEquals("\n", pattern0.pattern());
      assertEquals(0, pattern0.flags());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Locale locale0 = ToolBox.LocaleTools.toLocale("");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(76);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(76, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(76, charBuffer0.length());
      assertEquals(76, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(76, charBuffer0.remaining());
      
      char[] charArray0 = new char[7];
      charArray0[0] = '\"';
      charArray0[1] = '4';
      charArray0[2] = 'd';
      charArray0[3] = 'k';
      charArray0[4] = '\\';
      charArray0[5] = 'C';
      charArray0[6] = 'I';
      boolean boolean0 = ToolBox.StringTools.containsNone(charBuffer0, charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\"', '4', 'd', 'k', '\\', 'C', 'I'}, charArray0);
      assertTrue(boolean0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(76, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(76, charBuffer0.length());
      assertEquals(76, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(76, charBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "oDK1x}V";
      String string1 = null;
      String string2 = ToolBox.RegExTools.replaceFirst("oDK1x}V", "oDK1x}V", (String) null);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("oDK1x}V", string2);
      
      int int0 = ToolBox.CharSequenceTools.indexOf("oDK1x}V", "oDK1x}V", (-4050));
      assertEquals(0, int0);
      
      boolean boolean0 = ToolBox.CharSequenceTools.regionMatches("oDK1x}V", true, (-4050), "oDK1x}V", 1639, 0);
      assertFalse(boolean0);
      
      boolean boolean1 = ToolBox.StringTools.containsAny((CharSequence) null, (CharSequence) "oDK1x}V");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        ToolBox.LocaleTools.toLocale("oDK1x}V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: oDK1x}V
         //
         verifyException("comp5111.assignment.cut.ToolBox$LocaleTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ToolBox toolBox0 = new ToolBox();
      assertNotNull(toolBox0);
      
      String string0 = ToolBox.RegExTools.replaceFirst((String) null, "", "");
      assertNull(string0);
      
      int int0 = ToolBox.StringTools.length((CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = ')';
      charArray0[1] = 'B';
      charArray0[2] = 'p';
      charArray0[3] = 't';
      charArray0[4] = 'h';
      boolean boolean0 = ToolBox.StringTools.containsNone((CharSequence) null, charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {')', 'B', 'p', 't', 'h'}, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = ToolBox.RegExTools.replaceFirst("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = ToolBox.StringTools.isEmpty("");
      assertTrue(boolean0);
      
      boolean boolean1 = ToolBox.StringTools.contains("", (-2726));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ToolBox.StringTools.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Pattern pattern0 = Pattern.compile("");
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      
      Predicate<String> predicate0 = pattern0.asPredicate();
      assertNotNull(predicate0);
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      
      String string1 = ToolBox.RegExTools.replaceAll("0Tk@r(t", "", "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0Tk@r(t", string1);
      
      String[] stringArray0 = pattern0.split((CharSequence) "0Tk@r(t", (-1));
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      
      String string2 = ToolBox.RegExTools.replaceAll("", pattern0, "");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      
      String string3 = ToolBox.StringTools.getCommonPrefix(stringArray0);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(8, stringArray0.length);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      
      int int0 = ToolBox.StringTools.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = ToolBox.RegExTools.replaceAll("5s *]MA9O7*4AP(R", (Pattern) null, "5s *]MA9O7*4AP(R");
      assertNotNull(string0);
      assertEquals("5s *]MA9O7*4AP(R", string0);
      
      charSequenceArray0[0] = (CharSequence) "5s *]MA9O7*4AP(R";
      int int0 = ToolBox.StringTools.indexOfDifference(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = ToolBox.StringTools.isMixedCase("5s *]MA9O7*4AP(R");
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean boolean1 = ToolBox.ArrayTools.isEmpty(booleanArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertFalse(boolean1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = ' ';
      charArray0[1] = '-';
      charArray0[2] = '}';
      charArray0[3] = '<';
      charArray0[4] = 'S';
      int int1 = ToolBox.StringTools.indexOfAny("5s *]MA9O7*4AP(R", charArray0);
      assertTrue(int1 == int0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {' ', '-', '}', '<', 'S', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int1);
      
      Locale locale0 = ToolBox.LocaleTools.toLocale((String) null);
      assertNull(locale0);
      
      int int2 = ToolBox.CharSequenceTools.lastIndexOf(charSequenceArray0[0], (-1), (-1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = ToolBox.RegExTools.replaceAll("5s *]MA9O7*4AP(R", (Pattern) null, "5s *]MA9O7*4AP(R");
      assertNotNull(string0);
      assertEquals("5s *]MA9O7*4AP(R", string0);
      
      charSequenceArray0[0] = (CharSequence) "5s *]MA9O7*4AP(R";
      int int0 = ToolBox.StringTools.indexOfDifference(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = ToolBox.StringTools.isMixedCase("5s *]MA9O7*4AP(R");
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean boolean1 = ToolBox.ArrayTools.isEmpty(booleanArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertFalse(boolean1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = ' ';
      charArray0[1] = '-';
      charArray0[2] = '}';
      charArray0[3] = '<';
      charArray0[4] = 'S';
      int int1 = ToolBox.StringTools.indexOfAny("5s *]MA9O7*4AP(R", charArray0);
      assertTrue(int1 == int0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {' ', '-', '}', '<', 'S'}, charArray0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = ToolBox.StringTools.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      int int0 = ToolBox.CharSequenceTools.lastIndexOf("\r", (-408), (-408));
      assertEquals((-1), int0);
      
      int int1 = ToolBox.CharSequenceTools.indexOf("\r", "\r", 0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Pattern pattern0 = Pattern.compile("$K");
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals("$K", pattern0.pattern());
      assertEquals("$K", pattern0.toString());
      
      String string1 = ToolBox.RegExTools.replaceFirst("\r", pattern0, "$K");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\r", string1);
      assertEquals(0, pattern0.flags());
      assertEquals("$K", pattern0.pattern());
      assertEquals("$K", pattern0.toString());
      
      ToolBox.CharTools toolBox_CharTools0 = new ToolBox.CharTools();
      assertNotNull(toolBox_CharTools0);
      assertEquals('\n', ToolBox.CharTools.LF);
      assertEquals('\r', ToolBox.CharTools.CR);
      assertEquals('\u0000', ToolBox.CharTools.NUL);
      
      int int2 = ToolBox.CharSequenceTools.lastIndexOf("\r", (-2303), (-2303));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '\u0000';
      charArray0[1] = '\u0000';
      charArray0[2] = '\r';
      charArray0[3] = '\r';
      charArray0[4] = '\r';
      int int3 = ToolBox.StringTools.indexOfAny("\r", charArray0);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\r', '\r', '\r'}, charArray0);
      assertEquals(0, int3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "\r";
      int int4 = ToolBox.StringTools.indexOfDifference(charSequenceArray0);
      assertFalse(int4 == int1);
      assertTrue(int4 == int0);
      assertFalse(int4 == int3);
      assertTrue(int4 == int2);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int4);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("", 1885);
      assertNotNull(pattern0);
      assertEquals(1885, pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      
      String string0 = ToolBox.RegExTools.replaceAll("r:eLD", pattern0, "Invalid locale format: ");
      assertNotNull(string0);
      assertEquals("Invalid locale format: rInvalid locale format: :Invalid locale format: eInvalid locale format: LInvalid locale format: DInvalid locale format: ", string0);
      assertEquals(1885, pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[1] = 'b';
      charArray0[2] = '_';
      charArray0[3] = '3';
      int int0 = ToolBox.StringTools.indexOfAny("Invalid locale format: rInvalid locale format: :Invalid locale format: eInvalid locale format: Invalid locale format: LInvalid locale format: DInvalid locale format: ", charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'[', 'b', '_', '3'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ToolBox.ArrayTools toolBox_ArrayTools0 = new ToolBox.ArrayTools();
      assertNotNull(toolBox_ArrayTools0);
      assertEquals((-1), ToolBox.ArrayTools.INDEX_NOT_FOUND);
      
      String string0 = ToolBox.StringTools.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "\n");
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\n", charBuffer0.toString());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      
      boolean boolean0 = ToolBox.StringTools.isMixedCase(charBuffer0);
      assertFalse(boolean0);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\n", charBuffer0.toString());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      
      int int0 = ToolBox.CharSequenceTools.lastIndexOf("\n", charBuffer0, (-1));
      assertEquals((-1), int0);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\n", charBuffer0.toString());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      
      char[] charArray0 = ToolBox.CharSequenceTools.toCharArray(charBuffer0);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'\n'}, charArray0);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\n", charBuffer0.toString());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      
      boolean boolean1 = ToolBox.StringTools.isNumeric(charBuffer0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\n", charBuffer0.toString());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "\n";
      objectArray0[1] = (Object) "\n";
      objectArray0[2] = (Object) toolBox_ArrayTools0;
      objectArray0[3] = (Object) toolBox_ArrayTools0;
      objectArray0[4] = (Object) toolBox_ArrayTools0;
      boolean boolean2 = ToolBox.ArrayTools.isEmpty(objectArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(5, objectArray0.length);
      assertFalse(boolean2);
      
      boolean boolean3 = ToolBox.CharSequenceTools.regionMatches(charBuffer0, false, (-1), charBuffer0, (-1), (-1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\n", charBuffer0.toString());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      
      ToolBox.LocaleTools toolBox_LocaleTools0 = new ToolBox.LocaleTools();
      assertNotNull(toolBox_LocaleTools0);
      
      boolean boolean4 = ToolBox.StringTools.containsAny((CharSequence) charBuffer0, (CharSequence) charBuffer0);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\n", charBuffer0.toString());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1000;
      shortArray0[1] = (short)55;
      boolean boolean5 = ToolBox.ArrayTools.isEmpty(shortArray0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)1000, (short)55}, shortArray0);
      assertFalse(boolean5);
      
      int int1 = ToolBox.StringTools.compare("\n", "\n", true);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = 'w';
      charArray0[2] = 'L';
      charArray0[3] = 'h';
      charArray0[4] = 'b';
      charArray0[5] = 'Y';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      assertEquals(6, charArray0.length);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'3', 'w', 'L', 'h', 'b', 'Y'}, charArray0);
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(6, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(6, charArray0.length);
      assertNotNull(charBuffer1);
      assertArrayEquals(new char[] {'3', 'w', 'L', 'h', 'b', 'Y'}, charArray0);
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(6, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.capacity());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.remaining());
      
      int int0 = ToolBox.CharSequenceTools.lastIndexOf(charBuffer1, charBuffer0, 0);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'3', 'w', 'L', 'h', 'b', 'Y'}, charArray0);
      assertEquals(0, int0);
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(6, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.capacity());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.remaining());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '<';
      charArray0[1] = 'K';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      assertEquals(2, charArray0.length);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'<', 'K'}, charArray0);
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      
      boolean boolean0 = ToolBox.CharSequenceTools.regionMatches(charBuffer0, true, (-429), charBuffer0, (-912), 0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'<', 'K'}, charArray0);
      assertFalse(boolean0);
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("_Sl7hkQ\"aYR");
      assertNotNull(pattern0);
      assertEquals("_Sl7hkQ\"aYR", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("_Sl7hkQ\"aYR", pattern0.toString());
      
      String string0 = ToolBox.RegExTools.replaceAll("_Sl7hkQ\"aYR", pattern0, "");
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("_Sl7hkQ\"aYR", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("_Sl7hkQ\"aYR", pattern0.toString());
      
      int int0 = ToolBox.StringTools.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String string1 = ToolBox.RegExTools.replaceFirst("-K?1R6IzjX8[JP", "g3>qI", "\r");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("-K?1R6IzjX8[JP", string1);
      
      boolean boolean0 = ToolBox.StringTools.containsAny((CharSequence) "", (CharSequence) "-K?1R6IzjX8[JP");
      assertFalse(boolean0);
      
      int int1 = ToolBox.StringTools.compare("]m", "_Sl7hkQ\"aYR", false);
      assertFalse(int1 == int0);
      assertEquals((-2), int1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        ToolBox.CharSequenceTools.indexOf((CharSequence) null, (CharSequence) null, 46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("comp5111.assignment.cut.ToolBox$CharSequenceTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = ToolBox.StringTools.getIfEmpty("(3ETuO", (Supplier<String>) null);
      assertNotNull(string0);
      assertEquals("(3ETuO", string0);
      
      boolean boolean0 = ToolBox.StringTools.isAllUpperCase("(3ETuO");
      assertFalse(boolean0);
      
      boolean boolean1 = ToolBox.StringTools.containsAny((CharSequence) "(3ETuO", (CharSequence) "(3ETuO");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        Pattern.compile("(3ETuO");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 6\r
         // (3ETuO
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = ToolBox.StringTools.compare("", "", false);
      assertEquals(0, int0);
      
      ToolBox.ArrayTools toolBox_ArrayTools0 = new ToolBox.ArrayTools();
      assertNotNull(toolBox_ArrayTools0);
      assertEquals((-1), ToolBox.ArrayTools.INDEX_NOT_FOUND);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(shortArray0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      short[] shortArray0 = new short[6];
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(shortArray0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(boolean0);
      
      String string0 = ToolBox.StringTools.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = ToolBox.StringTools.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = ToolBox.RegExTools.replaceAll("", "", "G{|I!  dk6g2;g*(s5");
      assertNotNull(string0);
      assertEquals("G{|I!  dk6g2;g*(s5", string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '}';
      charArray0[1] = 'E';
      charArray0[2] = '0';
      charArray0[3] = '9';
      charArray0[4] = 'R';
      charArray0[5] = 'u';
      int int0 = ToolBox.StringTools.indexOfAnyBut((CharSequence) "G{|I!  dk6g2;g*(s5", charArray0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'}', 'E', '0', '9', 'R', 'u'}, charArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = ToolBox.RegExTools.replacePattern((String) null, "PobZEDY", "RN67PDS");
      assertNull(string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '\'';
      charArray0[1] = '^';
      charArray0[2] = 'Z';
      charArray0[3] = '&';
      charArray0[4] = '9';
      boolean boolean0 = ToolBox.StringTools.containsAny((CharSequence) null, charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\'', '^', 'Z', '&', '9'}, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ToolBox.StringTools toolBox_StringTools0 = new ToolBox.StringTools();
      assertNotNull(toolBox_StringTools0);
      assertEquals((-1), ToolBox.StringTools.INDEX_NOT_FOUND);
      
      ToolBox toolBox0 = new ToolBox();
      assertNotNull(toolBox0);
      
      // Undeclared exception!
      try { 
        ToolBox.ArrayTools.getLength(toolBox_StringTools0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean0);
      
      ToolBox.CharTools toolBox_CharTools0 = new ToolBox.CharTools();
      assertNotNull(toolBox_CharTools0);
      assertEquals('\r', ToolBox.CharTools.CR);
      assertEquals('\n', ToolBox.CharTools.LF);
      assertEquals('\u0000', ToolBox.CharTools.NUL);
      
      int int0 = ToolBox.StringTools.compareIgnoreCase("KjEFNK<pL'w6QRnd", "KjEFNK<pL'w6QRnd", false);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '\r';
      boolean boolean1 = ToolBox.ArrayTools.isEmpty(intArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {13}, intArray0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = ToolBox.RegExTools.replaceAll("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '1';
      charArray0[1] = 'R';
      boolean boolean0 = ToolBox.StringTools.containsNone("", charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'1', 'R'}, charArray0);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'R';
      objectArray0[1] = (Object) '1';
      boolean boolean1 = ToolBox.ArrayTools.isEmpty(objectArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, objectArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = ToolBox.StringTools.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = ToolBox.ArrayTools.isEmpty(byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean1);
      
      String string0 = ToolBox.RegExTools.replacePattern((String) null, (String) null, (String) null);
      assertNull(string0);
      
      int int0 = ToolBox.StringTools.compareIgnoreCase("", (String) null, false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ToolBox.CharSequenceTools toolBox_CharSequenceTools0 = new ToolBox.CharSequenceTools();
      assertNotNull(toolBox_CharSequenceTools0);
      
      ToolBox.CharTools toolBox_CharTools0 = new ToolBox.CharTools();
      assertNotNull(toolBox_CharTools0);
      assertEquals('\r', ToolBox.CharTools.CR);
      assertEquals('\n', ToolBox.CharTools.LF);
      assertEquals('\u0000', ToolBox.CharTools.NUL);
      
      String string0 = ToolBox.StringTools.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      int int0 = ToolBox.CharSequenceTools.lastIndexOf(" ", " ", 0);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '\u0000';
      charArray0[1] = '\r';
      charArray0[2] = '\n';
      charArray0[3] = '\n';
      charArray0[4] = '\r';
      boolean boolean0 = ToolBox.StringTools.containsNone(" ", charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\r', '\n', '\n', '\r'}, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = ToolBox.StringTools.isCreatable("");
      assertFalse(boolean0);
      
      String string0 = ToolBox.RegExTools.replaceAll("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = 'J';
      charArray0[2] = '!';
      int int0 = ToolBox.StringTools.indexOfAny("", charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'x', 'J', '!'}, charArray0);
      assertEquals((-1), int0);
      
      int int1 = ToolBox.CharSequenceTools.indexOf("", "", (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean1 = ToolBox.ArrayTools.isEmpty(charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'x', 'J', '!'}, charArray0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string0 = ToolBox.StringTools.getIfEmpty("", supplier0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ToolBox.ArrayTools toolBox_ArrayTools0 = new ToolBox.ArrayTools();
      assertNotNull(toolBox_ArrayTools0);
      assertEquals((-1), ToolBox.ArrayTools.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-1);
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      String string0 = ToolBox.StringTools.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = ToolBox.StringTools.indexOfAnyBut((CharSequence) "", toolBox_ArrayTools0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), int0);
      assertEquals((-1), ToolBox.ArrayTools.INDEX_NOT_FOUND);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      boolean boolean1 = ToolBox.ArrayTools.isEmpty(longArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertFalse(boolean1);
      
      boolean boolean2 = ToolBox.StringTools.isCreatable("eD\u0005{f_!^,t:sGkQ");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = ToolBox.StringTools.isCreatable("");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = ToolBox.StringTools.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      boolean boolean0 = ToolBox.StringTools.isMixedCase("\n");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = ToolBox.StringTools.containsAny((CharSequence) "\n", charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean1);
      
      boolean boolean2 = ToolBox.StringTools.equals((CharSequence) "\n", (CharSequence) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = ToolBox.ArrayTools.isEmpty((byte[]) null);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      int int0 = ToolBox.StringTools.compareIgnoreCase("\n", "\n", false);
      assertEquals(0, int0);
      
      boolean boolean4 = ToolBox.StringTools.containsAny((CharSequence) "\n", (CharSequence) null);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      char[] charArray1 = ToolBox.CharSequenceTools.toCharArray("\n");
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\n'}, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      boolean boolean5 = ToolBox.ArrayTools.isEmpty(objectArray0);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertEquals(1, objectArray0.length);
      assertFalse(boolean5);
      
      ToolBox.ArrayTools toolBox_ArrayTools0 = new ToolBox.ArrayTools();
      assertNotNull(toolBox_ArrayTools0);
      assertEquals((-1), ToolBox.ArrayTools.INDEX_NOT_FOUND);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[1] = (CharSequence) "\n";
      int int1 = ToolBox.StringTools.indexOfDifference(charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      boolean boolean6 = ToolBox.ArrayTools.isEmpty(toolBox_ArrayTools0.EMPTY_CHAR_ARRAY);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6);
      assertEquals((-1), ToolBox.ArrayTools.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean boolean7 = ToolBox.ArrayTools.isEmpty(booleanArray0);
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean2);
      assertFalse(boolean7 == boolean3);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, true}, booleanArray0));
      assertFalse(boolean7);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object2));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(objectArray0);
      assertEquals(5, objectArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = ToolBox.StringTools.getCommonPrefix((String[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = ToolBox.CharSequenceTools.indexOf("", (-2101), (-2101));
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-72);
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte) (-117), (byte)1, (byte) (-72)}, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = ToolBox.RegExTools.replacePattern("h={3NI4", "", "");
      assertNotNull(string0);
      assertEquals("h={3NI4", string0);
      
      ToolBox.StringTools toolBox_StringTools0 = new ToolBox.StringTools();
      assertNotNull(toolBox_StringTools0);
      assertEquals((-1), ToolBox.StringTools.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) (-1);
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-1.0), (-1.0), (-1.0), (-1.0), 0.0, (-1.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ToolBox.RegExTools toolBox_RegExTools0 = new ToolBox.RegExTools();
      assertNotNull(toolBox_RegExTools0);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      ToolBox toolBox0 = new ToolBox();
      assertNotNull(toolBox0);
      
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      
      // Undeclared exception!
      try { 
        charBuffer0.position((-269));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      
      char[] charArray1 = ToolBox.CharSequenceTools.toCharArray(charBuffer0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      
      boolean boolean0 = ToolBox.StringTools.isAllUpperCase(charBuffer0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean0);
      assertNotSame(charArray0, charArray1);
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      
      int int0 = ToolBox.StringTools.indexOfAnyBut((CharSequence) charBuffer0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals((-1), int0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "wj4R{Jw~\"";
      String string0 = ToolBox.StringTools.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      
      boolean boolean0 = ToolBox.StringTools.isAllLowerCase(charBuffer0);
      assertFalse(boolean0);
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = ToolBox.RegExTools.replacePattern("", (String) null, "Invalid locale format: ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = ToolBox.StringTools.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ToolBox.CharTools toolBox_CharTools0 = new ToolBox.CharTools();
      assertNotNull(toolBox_CharTools0);
      assertEquals('\u0000', ToolBox.CharTools.NUL);
      assertEquals('\n', ToolBox.CharTools.LF);
      assertEquals('\r', ToolBox.CharTools.CR);
      
      String string0 = ToolBox.StringTools.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      int int0 = ToolBox.StringTools.indexOfAnyBut((CharSequence) " ", (CharSequence) " ");
      assertEquals((-1), int0);
      
      boolean boolean0 = ToolBox.StringTools.isMixedCase(" ");
      assertFalse(boolean0);
      
      ToolBox.ArrayTools toolBox_ArrayTools0 = new ToolBox.ArrayTools();
      assertNotNull(toolBox_ArrayTools0);
      assertEquals((-1), ToolBox.ArrayTools.INDEX_NOT_FOUND);
      
      boolean boolean1 = ToolBox.ArrayTools.isEmpty(toolBox_ArrayTools0.EMPTY_CHAR_ARRAY);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals((-1), ToolBox.ArrayTools.INDEX_NOT_FOUND);
      
      int int1 = ToolBox.StringTools.compareIgnoreCase(" ", " ", false);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = ToolBox.StringTools.indexOfAny(" ", toolBox_ArrayTools0.EMPTY_CHAR_ARRAY);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      assertEquals((-1), ToolBox.ArrayTools.INDEX_NOT_FOUND);
      
      ToolBox toolBox0 = new ToolBox();
      assertNotNull(toolBox0);
      
      boolean boolean2 = ToolBox.CharSequenceTools.regionMatches(" ", false, (-3849), " ", 1, 1);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CharSequence charSequence0 = ToolBox.StringTools.getIfEmpty((CharSequence) null, (Supplier<CharSequence>) null);
      assertNull(charSequence0);
      
      int int0 = ToolBox.StringTools.length((CharSequence) null);
      assertEquals(0, int0);
      
      boolean boolean0 = ToolBox.StringTools.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = ToolBox.StringTools.isAllLowerCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = "\\P&u6To]g[";
      // Undeclared exception!
      try { 
        ToolBox.LocaleTools.toLocale("P&u6To]g[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: P&u6To]g[
         //
         verifyException("comp5111.assignment.cut.ToolBox$LocaleTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = ToolBox.RegExTools.replacePattern("eC@js(]m>nkIWW]/o", "", "");
      assertNotNull(string0);
      assertEquals("eC@js(]m>nkIWW]/o", string0);
      
      ToolBox.LocaleTools toolBox_LocaleTools0 = new ToolBox.LocaleTools();
      assertNotNull(toolBox_LocaleTools0);
      
      boolean boolean0 = ToolBox.StringTools.isAllLowerCase("eC@js(]m>nkIWW]/o");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ToolBox.RegExTools.replaceAll("eC@js(]m>nkIWW]/o", "eC@js(]m>nkIWW]/o", "#");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 17\r
         // eC@js(]m>nkIWW]/o
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = ToolBox.StringTools.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = ToolBox.StringTools.isAllLowerCase("");
      assertFalse(boolean0);
      
      boolean boolean1 = ToolBox.StringTools.isAllLowerCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 1097L;
      longArray0[1] = 0L;
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {1097L, 0L}, longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = ToolBox.StringTools.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      boolean boolean0 = ToolBox.StringTools.containsAny((CharSequence) null, (CharSequence) "\n");
      assertFalse(boolean0);
      
      String string1 = ToolBox.RegExTools.replaceAll("\n", "\n", "\n");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\n", string1);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = ToolBox.ArrayTools.isEmpty(doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean1);
      
      Pattern pattern0 = Pattern.compile("\n", 0);
      assertNotNull(pattern0);
      assertEquals("\n", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("\n", pattern0.toString());
      
      String string2 = ToolBox.RegExTools.replaceAll((String) null, pattern0, "comp5111.assignment.cut.ToolBox$CharSequenceTools");
      assertNull(string2);
      assertEquals("\n", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("\n", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ToolBox.CharTools toolBox_CharTools0 = new ToolBox.CharTools();
      assertNotNull(toolBox_CharTools0);
      assertEquals('\r', ToolBox.CharTools.CR);
      assertEquals('\n', ToolBox.CharTools.LF);
      assertEquals('\u0000', ToolBox.CharTools.NUL);
      
      boolean boolean0 = ToolBox.StringTools.isCreatable("m8J>Wz;");
      assertFalse(boolean0);
      
      boolean boolean1 = ToolBox.StringTools.isNumeric("m8J>Wz;");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ToolBox.RegExTools toolBox_RegExTools0 = new ToolBox.RegExTools();
      assertNotNull(toolBox_RegExTools0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "m8J>Wz;";
      charSequenceArray0[1] = (CharSequence) "m8J>Wz;";
      charSequenceArray0[2] = (CharSequence) "m8J>Wz;";
      char[] charArray0 = new char[3];
      charArray0[0] = '\u0000';
      charArray0[1] = '\r';
      charArray0[2] = '\r';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'\u0000', '\r', '\r'}, charArray0);
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.length());
      assertEquals(3, charBuffer0.capacity());
      assertEquals("\u0000\r\r", charBuffer0.toString());
      assertEquals(3, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(3, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      
      charSequenceArray0[3] = (CharSequence) charBuffer0;
      int int0 = ToolBox.StringTools.indexOfDifference(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ToolBox.ArrayTools toolBox_ArrayTools0 = new ToolBox.ArrayTools();
      assertNotNull(toolBox_ArrayTools0);
      assertEquals((-1), ToolBox.ArrayTools.INDEX_NOT_FOUND);
      
      boolean boolean0 = ToolBox.StringTools.isCreatable("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = ToolBox.StringTools.compareIgnoreCase("_", "[ ,xTNnn", false);
      assertEquals(4, int0);
      
      int int1 = ToolBox.StringTools.indexOfAnyBut((CharSequence) "_", (CharSequence) "[ ,xTNnn");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = ToolBox.CharSequenceTools.regionMatches("_", false, (-1), "[ ,xTNnn", (-1), (-1));
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      int int2 = ToolBox.StringTools.indexOfAnyBut((CharSequence) "[ ,xTNnn", charArray0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int2);
      
      boolean boolean1 = ToolBox.StringTools.equals((CharSequence) "[ ,xTNnn", (CharSequence) "[ ,xTNnn");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ToolBox.RegExTools toolBox_RegExTools0 = new ToolBox.RegExTools();
      assertNotNull(toolBox_RegExTools0);
      
      int int3 = ToolBox.CharSequenceTools.indexOf("[ ,xTNnn", "[ ,xTNnn", 1350);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals((-1), int3);
      
      int int4 = ToolBox.CharSequenceTools.lastIndexOf("_", (-1), (-1));
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertEquals((-1), int4);
      
      int int5 = ToolBox.StringTools.length("_");
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertEquals(1, int5);
      
      int int6 = ToolBox.CharSequenceTools.indexOf("[ ,xTNnn", 0, 4);
      assertTrue(int6 == int2);
      assertTrue(int6 == int4);
      assertFalse(int6 == int1);
      assertFalse(int6 == int0);
      assertFalse(int6 == int5);
      assertTrue(int6 == int3);
      assertEquals((-1), int6);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = ToolBox.ArrayTools.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'g';
      charArray0[1] = 'D';
      charArray0[2] = 'B';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'g', 'D', 'B'}, charArray0);
      assertEquals("gDB", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(3, charBuffer0.limit());
      assertEquals(3, charBuffer0.length());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertEquals(3, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      
      int int0 = ToolBox.StringTools.indexOfAnyBut((CharSequence) charBuffer0, charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'g', 'D', 'B'}, charArray0);
      assertEquals((-1), int0);
      assertEquals("gDB", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(3, charBuffer0.limit());
      assertEquals(3, charBuffer0.length());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertEquals(3, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        ToolBox.CharSequenceTools.regionMatches((CharSequence) null, true, (-550), (CharSequence) null, (-550), (-550));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("comp5111.assignment.cut.ToolBox$CharSequenceTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = ToolBox.RegExTools.replaceFirst("7@]L5v5xy5Ae$.H", "7@]L5v5xy5Ae$.H", "");
      assertNotNull(string0);
      assertEquals("7@]L5v5xy5Ae$.H", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.0F);
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ToolBox.RegExTools toolBox_RegExTools0 = new ToolBox.RegExTools();
      assertNotNull(toolBox_RegExTools0);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null, (-290), 249);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ToolBox.StringTools toolBox_StringTools0 = new ToolBox.StringTools();
      assertNotNull(toolBox_StringTools0);
      assertEquals((-1), ToolBox.StringTools.INDEX_NOT_FOUND);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'K';
      charArray0[1] = 'y';
      charArray0[2] = 'F';
      boolean boolean0 = ToolBox.StringTools.containsAny((CharSequence) "\r", charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'K', 'y', 'F'}, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)94;
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-44), (byte)94}, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = ToolBox.StringTools.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(5);
      assertNotNull(charBuffer0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(5, charBuffer0.remaining());
      assertEquals(5, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(5, charBuffer0.length());
      assertEquals(5, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      
      boolean boolean0 = ToolBox.StringTools.containsAny((CharSequence) "", (CharSequence) charBuffer0);
      assertFalse(boolean0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(5, charBuffer0.remaining());
      assertEquals(5, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(5, charBuffer0.length());
      assertEquals(5, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = ToolBox.StringTools.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      int int0 = ToolBox.StringTools.length("\n");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)48, (byte)113, (byte)36, (byte) (-119), (byte)69, (byte) (-1), (byte) (-1)}, byteArray0);
      assertFalse(boolean0);
      
      Pattern pattern0 = Pattern.compile("Vc*j{`p:Sa", (-1));
      assertNotNull(pattern0);
      assertEquals("Vc*j{`p:Sa", pattern0.pattern());
      assertEquals((-1), pattern0.flags());
      assertEquals("Vc*j{`p:Sa", pattern0.toString());
      
      String string0 = ToolBox.RegExTools.replaceFirst("comp5111.assignment.cut.ToolBox$ArrayTools", pattern0, "Vc*j{`p:Sa");
      assertNotNull(string0);
      assertEquals("comp5111.assignment.cut.ToolBox$ArrayTools", string0);
      assertEquals("Vc*j{`p:Sa", pattern0.pattern());
      assertEquals((-1), pattern0.flags());
      assertEquals("Vc*j{`p:Sa", pattern0.toString());
      
      char[] charArray0 = new char[7];
      charArray0[0] = '5';
      charArray0[1] = '\'';
      charArray0[2] = '/';
      charArray0[3] = 'f';
      charArray0[4] = '@';
      charArray0[5] = '+';
      charArray0[6] = '@';
      boolean boolean1 = ToolBox.StringTools.containsAny((CharSequence) "comp5111.assignment.cut.ToolBox$ArrayTools", charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'5', '\'', '/', 'f', '@', '+', '@'}, charArray0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = ToolBox.StringTools.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "\r");
      assertNotNull(charBuffer0);
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals("\r", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      
      int int0 = ToolBox.CharSequenceTools.lastIndexOf(charBuffer0, 4631, 2);
      assertEquals((-1), int0);
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals("\r", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 4631;
      longArray0[3] = (long) (-1);
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L), 4631L, (-1L)}, longArray0);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '^';
      CharBuffer charBuffer1 = charBuffer0.slice();
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals("\r", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer1.remaining());
      assertEquals(1, charBuffer1.capacity());
      assertEquals(1, charBuffer1.length());
      assertFalse(charBuffer1.hasArray());
      assertFalse(charBuffer1.isDirect());
      assertEquals("\r", charBuffer1.toString());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.isReadOnly());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(1, charBuffer1.limit());
      
      CharBuffer charBuffer2 = CharBuffer.wrap(charArray0);
      assertFalse(charBuffer2.equals((Object)charBuffer1));
      assertFalse(charBuffer2.equals((Object)charBuffer0));
      assertEquals(1, charArray0.length);
      assertNotNull(charBuffer2);
      assertArrayEquals(new char[] {'^'}, charArray0);
      assertEquals(1, charBuffer2.remaining());
      assertEquals(1, charBuffer2.limit());
      assertEquals(1, charBuffer2.capacity());
      assertEquals("^", charBuffer2.toString());
      assertEquals(0, charBuffer2.position());
      assertFalse(charBuffer2.isDirect());
      assertFalse(charBuffer2.isReadOnly());
      assertTrue(charBuffer2.hasArray());
      assertTrue(charBuffer2.hasRemaining());
      assertEquals(1, charBuffer2.length());
      assertEquals(0, charBuffer2.arrayOffset());
      
      boolean boolean1 = ToolBox.CharSequenceTools.regionMatches(charBuffer0, false, 65536, charBuffer0, 4631, 55);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertFalse(charBuffer0.equals((Object)charBuffer2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(charBuffer0, charBuffer1);
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals("\r", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      
      boolean boolean2 = ToolBox.StringTools.isAllUpperCase(charBuffer0);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertFalse(charBuffer0.equals((Object)charBuffer2));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(charBuffer0, charBuffer1);
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals("\r", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '^';
      intArray0[1] = (int) '^';
      intArray0[2] = 4631;
      boolean boolean3 = ToolBox.ArrayTools.isEmpty(intArray0);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {94, 94, 4631}, intArray0);
      assertFalse(boolean3);
      
      boolean boolean4 = ToolBox.ArrayTools.isEmpty(longArray0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L), 4631L, (-1L)}, longArray0);
      assertFalse(boolean4);
      
      CharBuffer charBuffer3 = CharBuffer.wrap(charArray0);
      assertFalse(charBuffer3.equals((Object)charBuffer1));
      assertFalse(charBuffer3.equals((Object)charBuffer0));
      assertTrue(charBuffer3.equals((Object)charBuffer2));
      assertEquals(1, charArray0.length);
      assertNotNull(charBuffer3);
      assertArrayEquals(new char[] {'^'}, charArray0);
      assertNotSame(charBuffer3, charBuffer2);
      assertEquals(0, charBuffer3.arrayOffset());
      assertEquals("^", charBuffer3.toString());
      assertEquals(1, charBuffer3.length());
      assertEquals(1, charBuffer3.remaining());
      assertFalse(charBuffer3.isDirect());
      assertTrue(charBuffer3.hasArray());
      assertFalse(charBuffer3.isReadOnly());
      assertTrue(charBuffer3.hasRemaining());
      assertEquals(0, charBuffer3.position());
      assertEquals(1, charBuffer3.capacity());
      assertEquals(1, charBuffer3.limit());
      
      int int1 = ToolBox.StringTools.indexOfAnyBut((CharSequence) null, (CharSequence) charBuffer3);
      assertFalse(charBuffer3.equals((Object)charBuffer1));
      assertFalse(charBuffer3.equals((Object)charBuffer0));
      assertTrue(charBuffer3.equals((Object)charBuffer2));
      assertTrue(int1 == int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'^'}, charArray0);
      assertEquals((-1), int1);
      assertNotSame(charBuffer3, charBuffer2);
      assertEquals(0, charBuffer3.arrayOffset());
      assertEquals("^", charBuffer3.toString());
      assertEquals(1, charBuffer3.length());
      assertEquals(1, charBuffer3.remaining());
      assertFalse(charBuffer3.isDirect());
      assertTrue(charBuffer3.hasArray());
      assertFalse(charBuffer3.isReadOnly());
      assertTrue(charBuffer3.hasRemaining());
      assertEquals(0, charBuffer3.position());
      assertEquals(1, charBuffer3.capacity());
      assertEquals(1, charBuffer3.limit());
      
      int int2 = ToolBox.StringTools.indexOfAnyBut((CharSequence) charBuffer3, charArray0);
      assertFalse(charBuffer3.equals((Object)charBuffer1));
      assertFalse(charBuffer3.equals((Object)charBuffer0));
      assertTrue(charBuffer3.equals((Object)charBuffer2));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'^'}, charArray0);
      assertEquals((-1), int2);
      assertNotSame(charBuffer3, charBuffer2);
      assertEquals(0, charBuffer3.arrayOffset());
      assertEquals("^", charBuffer3.toString());
      assertEquals(1, charBuffer3.length());
      assertEquals(1, charBuffer3.remaining());
      assertFalse(charBuffer3.isDirect());
      assertTrue(charBuffer3.hasArray());
      assertFalse(charBuffer3.isReadOnly());
      assertTrue(charBuffer3.hasRemaining());
      assertEquals(0, charBuffer3.position());
      assertEquals(1, charBuffer3.capacity());
      assertEquals(1, charBuffer3.limit());
      
      boolean boolean5 = ToolBox.ArrayTools.isEmpty(charArray0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'^'}, charArray0);
      assertFalse(boolean5);
      
      // Undeclared exception!
      try { 
        ToolBox.CharSequenceTools.regionMatches(charBuffer0, false, 48, (CharSequence) null, (-1), 4631);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("comp5111.assignment.cut.ToolBox$CharSequenceTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ToolBox.ArrayTools toolBox_ArrayTools0 = new ToolBox.ArrayTools();
      assertNotNull(toolBox_ArrayTools0);
      assertEquals((-1), ToolBox.ArrayTools.INDEX_NOT_FOUND);
      
      String string0 = ToolBox.StringTools.getCommonPrefix((String[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) (-1);
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(longArray0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), (-1L), 0L, (-1L), (-1L)}, longArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = ToolBox.StringTools.isMixedCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Locale locale0 = ToolBox.LocaleTools.toLocale("");
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      String string1 = ToolBox.RegExTools.replaceAll("QU<P>UdipU4mR", "", "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("QU<P>UdipU4mR", string1);
      
      int int0 = ToolBox.CharSequenceTools.lastIndexOf("QU<P>UdipU4mR", (-1), 0);
      assertEquals((-1), int0);
      
      boolean boolean2 = ToolBox.StringTools.isAllLowerCase("QU<P>UdipU4mR");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = ToolBox.StringTools.containsAny((CharSequence) "QU<P>UdipU4mR", toolBox_ArrayTools0.EMPTY_CHAR_ARRAY);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertEquals((-1), ToolBox.ArrayTools.INDEX_NOT_FOUND);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "QU<P>UdipU4mR");
      assertNotNull(charBuffer0);
      assertEquals(13, charBuffer0.length());
      assertEquals(13, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals("QU<P>UdipU4mR", charBuffer0.toString());
      assertEquals(13, charBuffer0.remaining());
      assertEquals(13, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.isReadOnly());
      
      boolean boolean4 = ToolBox.StringTools.equals((CharSequence) "QU<P>UdipU4mR", (CharSequence) charBuffer0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4);
      assertEquals(13, charBuffer0.length());
      assertEquals(13, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals("QU<P>UdipU4mR", charBuffer0.toString());
      assertEquals(13, charBuffer0.remaining());
      assertEquals(13, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.isReadOnly());
      
      boolean boolean5 = ToolBox.StringTools.isNumeric(charBuffer0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5);
      assertEquals(13, charBuffer0.length());
      assertEquals(13, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals("QU<P>UdipU4mR", charBuffer0.toString());
      assertEquals(13, charBuffer0.remaining());
      assertEquals(13, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string0 = ToolBox.StringTools.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = ToolBox.CharSequenceTools.toCharArray("");
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = ToolBox.ArrayTools.isEmpty((Object[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte)49;
      boolean boolean1 = ToolBox.ArrayTools.isEmpty(byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte) (-1), (byte) (-78), (byte)49}, byteArray0);
      assertFalse(boolean1);
      
      String string1 = ToolBox.StringTools.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean2 = ToolBox.StringTools.contains("", 95);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = ToolBox.StringTools.isNumeric("");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.capacity());
      
      boolean boolean4 = ToolBox.StringTools.containsAny((CharSequence) charBuffer0, charArray0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean4);
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.capacity());
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) (byte)0;
      longArray0[2] = 3392L;
      longArray0[3] = (long) (byte)49;
      longArray0[4] = (long) (byte) (-1);
      boolean boolean5 = ToolBox.ArrayTools.isEmpty(longArray0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 0L, 3392L, 49L, (-1L)}, longArray0);
      assertFalse(boolean5);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-2636.02F);
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte) (-78);
      floatArray0[3] = (float) 0L;
      floatArray0[4] = 2586.6167F;
      floatArray0[5] = (float) (byte)0;
      floatArray0[6] = (float) (-1L);
      floatArray0[7] = (float) 3392L;
      floatArray0[8] = (float) 95;
      boolean boolean6 = ToolBox.ArrayTools.isEmpty(floatArray0);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean5);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-2636.02F), 0.0F, (-78.0F), 0.0F, 2586.6167F, 0.0F, (-1.0F), 3392.0F, 95.0F}, floatArray0, 0.01F);
      assertFalse(boolean6);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = ToolBox.StringTools.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      CharSequence charSequence0 = ToolBox.StringTools.getIfEmpty((CharSequence) " ", (Supplier<CharSequence>) null);
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals(" ", charSequence0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) " ");
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.limit());
      
      boolean boolean0 = ToolBox.StringTools.isEmpty(charBuffer0);
      assertFalse(boolean0);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.limit());
      
      CharBuffer charBuffer1 = CharBuffer.allocate(1);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(1, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(1, charBuffer1.remaining());
      assertTrue(charBuffer1.hasArray());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.position());
      assertEquals(1, charBuffer1.capacity());
      assertEquals("\u0000", charBuffer1.toString());
      assertEquals(1, charBuffer1.limit());
      
      int int0 = ToolBox.CharSequenceTools.indexOf(charBuffer0, " ", 13);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertEquals((-1), int0);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.limit());
      
      char[] charArray0 = ToolBox.CharSequenceTools.toCharArray(charBuffer0);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {' '}, charArray0);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.limit());
      
      boolean boolean1 = ToolBox.StringTools.isCreatable("Zp,4j*+u0MVC");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ToolBox.ArrayTools.isEmpty(charArray0);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {' '}, charArray0);
      assertFalse(boolean2);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.limit());
      
      int int1 = ToolBox.StringTools.indexOfAnyBut((CharSequence) " ", (CharSequence) " ");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = ToolBox.CharSequenceTools.lastIndexOf(charBuffer0, " ", 1);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.limit());
      
      boolean boolean3 = ToolBox.CharSequenceTools.regionMatches("Zp,4j*+u0MVC", false, (-1), charBuffer0, (-2706), (-1));
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.limit());
      
      int int3 = ToolBox.CharSequenceTools.lastIndexOf(" ", charBuffer0, 71);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.limit());
      
      int int4 = ToolBox.StringTools.indexOfAnyBut((CharSequence) " ", (CharSequence) "Zp,4j*+u0MVC");
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertEquals(0, int4);
      
      boolean boolean4 = ToolBox.StringTools.isEmpty(charBuffer0);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.limit());
      
      int int5 = ToolBox.CharSequenceTools.indexOf(charBuffer0, Integer.MAX_VALUE, 3);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertTrue(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertTrue(int5 == int0);
      assertEquals((-1), int5);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.limit());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ToolBox.ArrayTools toolBox_ArrayTools0 = new ToolBox.ArrayTools();
      assertNotNull(toolBox_ArrayTools0);
      assertEquals((-1), ToolBox.ArrayTools.INDEX_NOT_FOUND);
      
      String string0 = ToolBox.StringTools.getCommonPrefix((String[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) (-1);
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(longArray0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), (-1L), 0L, (-1L), (-1L)}, longArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = ToolBox.StringTools.isCreatable("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Locale locale0 = ToolBox.LocaleTools.toLocale("");
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      
      String string1 = ToolBox.RegExTools.replaceAll("QU<P>UdipU4mR", "", "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("QU<P>UdipU4mR", string1);
      
      int int0 = ToolBox.CharSequenceTools.lastIndexOf("QU<P>UdipU4mR", (-1), 0);
      assertEquals((-1), int0);
      
      boolean boolean2 = ToolBox.StringTools.isAllLowerCase("QU<P>UdipU4mR");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = ToolBox.StringTools.containsAny((CharSequence) "QU<P>UdipU4mR", toolBox_ArrayTools0.EMPTY_CHAR_ARRAY);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertEquals((-1), ToolBox.ArrayTools.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = ToolBox.StringTools.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      CharSequence charSequence0 = ToolBox.StringTools.getIfEmpty((CharSequence) " ", (Supplier<CharSequence>) null);
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals(" ", charSequence0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) " ");
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      
      boolean boolean0 = ToolBox.StringTools.isEmpty(charBuffer0);
      assertFalse(boolean0);
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      
      CharBuffer charBuffer1 = CharBuffer.allocate(1);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals("\u0000", charBuffer1.toString());
      assertEquals(1, charBuffer1.limit());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(1, charBuffer1.remaining());
      assertEquals(1, charBuffer1.capacity());
      assertEquals(1, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isReadOnly());
      
      int int0 = ToolBox.CharSequenceTools.indexOf(charBuffer0, " ", 13);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertEquals((-1), int0);
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      
      char[] charArray0 = ToolBox.CharSequenceTools.toCharArray(charBuffer0);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {' '}, charArray0);
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      
      boolean boolean1 = ToolBox.StringTools.isCreatable("Zp,4j*+u0MVC");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ToolBox.ArrayTools.isEmpty(charArray0);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {' '}, charArray0);
      assertFalse(boolean2);
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      
      int int1 = ToolBox.StringTools.indexOfAnyBut((CharSequence) " ", (CharSequence) " ");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = ToolBox.CharSequenceTools.lastIndexOf(charBuffer0, " ", 1);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      
      boolean boolean3 = ToolBox.StringTools.isCreatable(" ");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      int int3 = ToolBox.CharSequenceTools.lastIndexOf(" ", charBuffer0, 71);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(0, int3);
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      
      int int4 = ToolBox.StringTools.indexOfAnyBut((CharSequence) " ", (CharSequence) "Zp,4j*+u0MVC");
      assertTrue(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
      assertEquals(0, int4);
      
      // Undeclared exception!
      try { 
        ToolBox.LocaleTools.toLocale("Zp,4j*+u0MVC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: Zp,4j*+u0MVC
         //
         verifyException("comp5111.assignment.cut.ToolBox$LocaleTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("A.2;I@bl[bvqZ[", (-587));
      assertNotNull(pattern0);
      assertEquals((-523), pattern0.flags());
      
      String[] stringArray0 = pattern0.split((CharSequence) "A.2;I@bl[bvqZ[");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      assertEquals((-523), pattern0.flags());
      
      String string0 = ToolBox.RegExTools.replaceAll("W|skvHbTA0N_!", pattern0, "A.2;I@bl[bvqZ[");
      assertNotNull(string0);
      assertEquals("W|skvHbTA0N_!", string0);
      assertEquals((-523), pattern0.flags());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'l';
      charArray0[1] = ';';
      charArray0[2] = '=';
      charArray0[0] = 'f';
      charArray0[4] = 'G';
      int int0 = ToolBox.StringTools.indexOfAnyBut((CharSequence) "W|skvHbTA0N_!", charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'f', ';', '=', '\u0000', 'G'}, charArray0);
      assertEquals(0, int0);
      
      int int1 = ToolBox.StringTools.indexOfAny("W|skvHbTA0N_!", charArray0);
      assertFalse(int1 == int0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'f', ';', '=', '\u0000', 'G'}, charArray0);
      assertEquals((-1), int1);
      
      boolean boolean0 = ToolBox.StringTools.containsAny((CharSequence) "W|skvHbTA0N_!", (CharSequence) "W|skvHbTA0N_!");
      assertTrue(boolean0);
      
      boolean boolean1 = ToolBox.ArrayTools.isEmpty((Object[]) stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean1);
      assertEquals((-523), pattern0.flags());
      
      ToolBox.LocaleTools toolBox_LocaleTools0 = new ToolBox.LocaleTools();
      assertNotNull(toolBox_LocaleTools0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = '%';
      charArray0[2] = 'J';
      charArray0[3] = 'x';
      charArray0[4] = 's';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'.', '%', 'J', 'x', 's'}, charArray0);
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(5, charBuffer0.length());
      assertEquals(5, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(".%Jxs", charBuffer0.toString());
      assertEquals(5, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(charBuffer0).when(supplier0).get();
      CharSequence charSequence0 = ToolBox.StringTools.getIfEmpty((CharSequence) null, supplier0);
      assertEquals(5, charArray0.length);
      assertNotNull(charSequence0);
      assertArrayEquals(new char[] {'.', '%', 'J', 'x', 's'}, charArray0);
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(5, charBuffer0.length());
      assertEquals(5, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(".%Jxs", charBuffer0.toString());
      assertEquals(5, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals(".%Jxs", charSequence0.toString());
      assertEquals(5, charSequence0.length());
      
      int int0 = ToolBox.CharSequenceTools.lastIndexOf(charSequence0, charSequence0, 4131);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'.', '%', 'J', 'x', 's'}, charArray0);
      assertEquals(0, int0);
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(5, charBuffer0.length());
      assertEquals(5, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(".%Jxs", charBuffer0.toString());
      assertEquals(5, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals(".%Jxs", charSequence0.toString());
      assertEquals(5, charSequence0.length());
      
      String string0 = ToolBox.RegExTools.replaceFirst("aX", "comp5111.assignment.cut.ToolBox$CharTools", "p");
      assertNotNull(string0);
      assertEquals("aX", string0);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '8';
      charArray1[1] = 'a';
      int int1 = ToolBox.StringTools.indexOfAny((CharSequence) null, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(int1 == int0);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'8', 'a'}, charArray1);
      assertEquals((-1), int1);
      assertNotSame(charArray1, charArray0);
      
      boolean boolean0 = ToolBox.StringTools.containsAny((CharSequence) "aX", (CharSequence) "aX");
      assertTrue(boolean0);
      
      String string1 = ToolBox.StringTools.LF;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\n", string1);
      
      boolean boolean1 = ToolBox.StringTools.isAllLowerCase("\n");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ToolBox.StringTools.isCreatable("\n");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int2 = ToolBox.StringTools.indexOfAnyBut((CharSequence) "comp5111.assignment.cut.ToolBox$CharTools", charArray1);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'8', 'a'}, charArray1);
      assertEquals(0, int2);
      assertNotSame(charArray1, charArray0);
      
      int int3 = ToolBox.StringTools.indexOfAny("aX", charArray1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'8', 'a'}, charArray1);
      assertEquals(0, int3);
      assertNotSame(charArray1, charArray0);
      
      boolean boolean3 = ToolBox.ArrayTools.isEmpty(charArray1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'8', 'a'}, charArray1);
      assertFalse(boolean3);
      assertNotSame(charArray1, charArray0);
      
      boolean boolean4 = ToolBox.StringTools.equals((CharSequence) "comp5111.assignment.cut.ToolBox$CharTools", (CharSequence) "\n");
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'a';
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) '8';
      boolean boolean5 = ToolBox.ArrayTools.isEmpty(doubleArray0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {97.0, (-1.0), 56.0}, doubleArray0, 0.01);
      assertFalse(boolean5);
      
      Supplier<String> supplier1 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = ToolBox.StringTools.getIfEmpty("p", supplier1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("p", string2);
      
      ToolBox.StringTools toolBox_StringTools0 = new ToolBox.StringTools();
      assertNotNull(toolBox_StringTools0);
      assertEquals((-1), ToolBox.StringTools.INDEX_NOT_FOUND);
      
      short[] shortArray0 = new short[0];
      boolean boolean6 = ToolBox.ArrayTools.isEmpty(shortArray0);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean5);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean6);
      
      boolean boolean7 = ToolBox.StringTools.isCreatable("aX");
      assertTrue(boolean7 == boolean4);
      assertFalse(boolean7 == boolean0);
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean1);
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean5);
      assertFalse(boolean7);
      
      String string3 = ToolBox.StringTools.EMPTY;
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '[';
      charArray0[1] = '|';
      charArray0[2] = 'x';
      charArray0[3] = 'x';
      charArray0[4] = 'q';
      charArray0[5] = 'U';
      charArray0[6] = 'J';
      charArray0[7] = 'I';
      charArray0[8] = 'c';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(9, charArray0.length);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'[', '|', 'x', 'x', 'q', 'U', 'J', 'I', 'c'}, charArray0);
      assertEquals(9, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(9, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(9, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.remaining());
      assertEquals("[|xxqUJIc", charBuffer0.toString());
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(9, charArray0.length);
      assertNotNull(charBuffer1);
      assertArrayEquals(new char[] {'[', '|', 'x', 'x', 'q', 'U', 'J', 'I', 'c'}, charArray0);
      assertEquals(9, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(9, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(9, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.remaining());
      assertEquals("[|xxqUJIc", charBuffer0.toString());
      assertEquals(9, charBuffer1.length());
      assertEquals(9, charBuffer1.remaining());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.hasArray());
      assertFalse(charBuffer1.isDirect());
      assertEquals("[|xxqUJIc", charBuffer1.toString());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(9, charBuffer1.limit());
      assertEquals(9, charBuffer1.capacity());
      assertTrue(charBuffer1.isReadOnly());
      
      int int0 = ToolBox.StringTools.indexOfAny(charBuffer1, charArray0);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'[', '|', 'x', 'x', 'q', 'U', 'J', 'I', 'c'}, charArray0);
      assertEquals(0, int0);
      assertEquals(9, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(9, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(9, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.remaining());
      assertEquals("[|xxqUJIc", charBuffer0.toString());
      assertEquals(9, charBuffer1.length());
      assertEquals(9, charBuffer1.remaining());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.hasArray());
      assertFalse(charBuffer1.isDirect());
      assertEquals("[|xxqUJIc", charBuffer1.toString());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(9, charBuffer1.limit());
      assertEquals(9, charBuffer1.capacity());
      assertTrue(charBuffer1.isReadOnly());
      
      int int1 = ToolBox.StringTools.indexOfAnyBut((CharSequence) charBuffer0, (CharSequence) charBuffer0);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertFalse(int1 == int0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'[', '|', 'x', 'x', 'q', 'U', 'J', 'I', 'c'}, charArray0);
      assertEquals((-1), int1);
      assertEquals(9, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(9, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(9, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.remaining());
      assertEquals("[|xxqUJIc", charBuffer0.toString());
      
      String string0 = ToolBox.RegExTools.replaceFirst("eonKHtK?z6fX6,1", "eonKHtK?z6fX6,1", "");
      assertNotNull(string0);
      assertEquals("eonKHtK?z6fX6,1", string0);
      
      boolean boolean0 = ToolBox.StringTools.isMixedCase("eonKHtK?z6fX6,1");
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean1 = ToolBox.ArrayTools.isEmpty(booleanArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertFalse(boolean1);
      
      boolean boolean2 = ToolBox.CharSequenceTools.regionMatches("", true, (-3361), "eonKHtK?z6fX6,1", 0, 0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Pattern pattern0 = Pattern.compile("eonKHtK?z6fX6,1", (-1));
      assertNotNull(pattern0);
      assertEquals((-1), pattern0.flags());
      assertEquals("eonKHtK?z6fX6,1", pattern0.toString());
      assertEquals("eonKHtK?z6fX6,1", pattern0.pattern());
      
      String string1 = ToolBox.RegExTools.replaceAll("", pattern0, "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals((-1), pattern0.flags());
      assertEquals("eonKHtK?z6fX6,1", pattern0.toString());
      assertEquals("eonKHtK?z6fX6,1", pattern0.pattern());
      
      boolean boolean3 = ToolBox.StringTools.isNumeric("");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) '|';
      floatArray0[1] = (float) '[';
      floatArray0[2] = (float) '[';
      floatArray0[3] = (float) 'q';
      floatArray0[4] = (float) 'x';
      floatArray0[5] = (float) 'J';
      floatArray0[6] = (float) 'U';
      floatArray0[7] = (float) '|';
      floatArray0[8] = (float) '[';
      boolean boolean4 = ToolBox.ArrayTools.isEmpty(floatArray0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {124.0F, 91.0F, 91.0F, 113.0F, 120.0F, 74.0F, 85.0F, 124.0F, 91.0F}, floatArray0, 0.01F);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ToolBox.RegExTools.replacePattern("M", "", "");
      ToolBox.StringTools.isEmpty("M");
      ToolBox toolBox0 = new ToolBox();
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ToolBox.ArrayTools.isEmpty(booleanArray0);
      char[] charArray0 = new char[4];
      charArray0[0] = '4';
      charArray0[1] = '2';
      charArray0[2] = 'h';
      charArray0[0] = '~';
      ToolBox.ArrayTools.isEmpty(charArray0);
      CharBuffer charBuffer0 = CharBuffer.allocate(3451);
      ToolBox.StringTools.indexOfAnyBut((CharSequence) charBuffer0, (CharSequence) "M");
      charBuffer0.chars();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "M";
      stringArray0[1] = "M";
      stringArray0[2] = "M";
      stringArray0[3] = "t@";
      ToolBox.StringTools.getCommonPrefix(stringArray0);
      // Undeclared exception!
      ToolBox.StringTools.indexOfAnyBut((CharSequence) charBuffer0, charArray0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ToolBox.ArrayTools.isEmpty(doubleArray0);
      ToolBox.RegExTools toolBox_RegExTools0 = new ToolBox.RegExTools();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte) (-57);
      byteArray0[7] = (byte) (-49);
      byteArray0[8] = (byte)0;
      ToolBox.ArrayTools.isEmpty(byteArray0);
      ToolBox.StringTools.compareIgnoreCase("a0(3u}OHfet", "a0(3u}OHfet", false);
      ToolBox.StringTools.length("a0(3u}OHfet");
      // Undeclared exception!
      try { 
        ToolBox.LocaleTools.toLocale("rA ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: rA 
         //
         verifyException("comp5111.assignment.cut.ToolBox$LocaleTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ToolBox.ArrayTools.isEmpty(byteArray0);
      assertTrue(boolean0);
      
      String string0 = ToolBox.RegExTools.replaceFirst("", (String) null, (String) null);
      assertNotNull(string0);
      
      int int0 = ToolBox.StringTools.compareIgnoreCase("", (String) null, false);
      assertEquals((-1), int0);
      
      boolean boolean1 = ToolBox.ArrayTools.isEmpty((float[]) null);
      boolean boolean2 = ToolBox.StringTools.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      boolean boolean0 = ToolBox.StringTools.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      ToolBox.CharSequenceTools toolBox_CharSequenceTools0 = new ToolBox.CharSequenceTools();
      boolean boolean1 = ToolBox.StringTools.equals((CharSequence) null, (CharSequence) null);
      boolean boolean2 = ToolBox.ArrayTools.isEmpty((float[]) null);
      int int0 = ToolBox.CharSequenceTools.lastIndexOf((CharSequence) null, (CharSequence) null, 1);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'W';
      boolean boolean3 = ToolBox.StringTools.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean3 == boolean1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 'W';
      longArray0[1] = (long) 'W';
      boolean boolean4 = ToolBox.ArrayTools.isEmpty(longArray0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ToolBox.CharTools toolBox_CharTools0 = new ToolBox.CharTools();
      String string0 = ToolBox.RegExTools.replaceAll((String) null, "comp5111.assignment.cut.ToolBox$StringTools", "comp5111.assignment.cut.ToolBox$StringTools");
      assertNull(string0);
      
      boolean boolean0 = ToolBox.StringTools.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      ToolBox.CharTools toolBox_CharTools1 = new ToolBox.CharTools();
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "comp5111.assignment.cut.ToolBox$StringTools";
      charSequenceArray0[2] = (CharSequence) "comp5111.assignment.cut.ToolBox$StringTools";
      charSequenceArray0[3] = (CharSequence) "comp5111.assignment.cut.ToolBox$StringTools";
      charSequenceArray0[4] = (CharSequence) "comp5111.assignment.cut.ToolBox$StringTools";
      charSequenceArray0[5] = (CharSequence) "comp5111.assignment.cut.ToolBox$StringTools";
      int int0 = ToolBox.StringTools.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      
      boolean boolean1 = ToolBox.StringTools.containsAny((CharSequence) null, charSequenceArray0[0]);
      char[] charArray0 = new char[3];
      charArray0[0] = '\n';
      charArray0[1] = '\u0000';
      charArray0[2] = '\n';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      boolean boolean2 = ToolBox.StringTools.isNumeric(charBuffer0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = ToolBox.StringTools.equals(charSequenceArray0[0], charSequenceArray0[5]);
      boolean boolean4 = ToolBox.StringTools.isAllUpperCase("comp5111.assignment.cut.ToolBox$StringTools");
      assertTrue(boolean4 == boolean3);
      
      String string1 = ToolBox.RegExTools.replaceFirst("comp5111.assignment.cut.ToolBox$StringTools", (Pattern) null, (String) null);
      assertNotNull(string1);
      
      int int1 = ToolBox.StringTools.compare((String) null, "comp5111.assignment.cut.ToolBox$RegExTools", false);
      assertEquals(1, int1);
  }
}
